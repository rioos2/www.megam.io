openapi: "3.0.0"
info:
  version: "2.0"
  title: Rio/OS 2.0 API
  description: API documentation for Rio/OS v2.0
  termsOfService: http://rio.digital/
  contact:
    name: Rio/OS Team
    email: info@rio.company
    url: http://rio.digital/
  license:
    name: Rio Advancement Inc License
    url: http://rio.digital/
servers:
  - url: https://localhost:7443/api/v1
tags:
  - name: accounts
    description: Everything about accounts
  - name: assemblyfactorys
    description: Everything about assembly factorys
  - name: assembly
    description: Everything about Assembly
  - name: healthz
    description: Everything about server status
  - name: origin
    description: Everything about origins
  - name: saml
    description: Everything about saml
  - name: oidc
    description: Everything about oidc
  - name: horizontalscaling
    description: Everything about horizontal scaling
  - name: roles
    description: Everything about roles
  - name: permissions
    description: Everything about permissions
  - name: nodes
    description: Everything about nodes
  - name: secrets
    description: Everything about secrets
  - name: networks
    description: Everything about networks
  - name: storagespool
    description: Everything about storagepools
  - name: services
    description: Everything about services
  - name: storageconnectors
    description: Everything about storageconnectors
  - name: ldap
    description: Everything about ldap
  - name: endpoints
    description: Everything about endpoints
  - name: datacenters
    description: Everything about datacenters
  - name: serviceaccounts
    description: Everything about service account
  - name: authenticate
    description: Everything about Authentcation
  - name: jobs
    description: Everything about jobs
  - name: plan
    description: Everything about plan
  - name: verticalscaling
    description: Everything about vertical scaling
  - name: volumes
    description: Everything about volumes
  - name: settingsmap
    description: Everything about settings map
  - name: logs
    description: Everything about logs
  - name: image
    description: Everything about image
  - name: audit
    description: Everything about audit
  - name: build
    description: Everything about build
  - name: buildconfig
    description: Everything about build config
  - name: imageref
    description: Everything about image reference

paths:
  /healthz:
    get:
      tags:
        - healthz
      description: |
        Returns the health of the api system. Useful for Rio/OS platform to figure out

        if the api server is ready or not
      operationId: GET_healthz
      responses:
        '200':
          description: API service is healthy
        '500':
          description: API service isn't reachable
        '503':
          description: API service temporarily unavailable
        default:
          description: unexpected error
  '/healthz/overall':
    get:
      tags:
        - healthz
      description: |
        Retrieve metrics data from prometheus
      operationId: Get metrics data
      responses:
        '200':
          description: metrics data response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /authenticate:
    post:
      tags:
        - authenticate
      summary: Login with email and password
      description: Login with email and password
      responses:
        '201':
          description: authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateResponse'
        '400':
          description: invalid input
        '500':
          description: internal seiceer error
        '409':
          description: input conflict
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authenticate'
  '/accounts/{account_id}/assemblys':
    post:
      tags:
        - assembly
      summary: Create new assembly
      parameters:
        - name: account_id
          in: path
          description: id ofthe account_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: succesfull creation of assembly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assembly'
    get:
      tags:
        - assembly
      summary : Get all assemblys by account
      description: Returns all assemblys by account_id
      operationId: getAssemblyByAccount
      parameters:
        - name: account_id
          in: path
          description: account id of assembly to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyList'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: assemblys not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /assemblys:
    get:
      tags:
        - assembly
      summary: Get all assembly
      description: Returns all assembly
      operationId: find assembly
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyList'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: assemblys not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/assemblys/{assemblyId}':
    get:
      tags:
        - assembly
      summary: Find assembly by ID
      description: Returns a single assembly
      operationId: getAssemblyById
      parameters:
        - name: assemblyId
          in: path
          description: ID of assembly to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyResponse'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: assemblys not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
    put:
      tags:
        - assembly
      summary: Update assembly by ID
      description: Returns updated single assembly
      operationId: getAssemblyById
      parameters:
        - name: assemblyId
          in: path
          description: ID of assembly to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: assemblys not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assembly'
  '/assemblys/{assemblyId}/status':
    put:
      tags:
        - assembly
      summary: Update assembly status by ID
      description: Update  assembly status
      operationId: getAssemblyById
      parameters:
        - name: assemblyId
          in: path
          description: ID of assembly to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: assemblys not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
  /accounts:
    post:
      tags:
        - accounts
      summary: Create new  account
      responses:
        '200':
          description: successful creation of the  account
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Accounts'
  '/accounts/{id}':
    get:
      tags:
        - accounts
      summary: Find account by ID
      description: Returns a single account
      operationId: getAccountById
      parameters:
        - name: id
          in: path
          description: ID of account to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/accounts/name/{email}':
    get:
      tags:
        - accounts
      summary: Find account by email
      description: Returns a single account
      operationId: getAccountByEmail
      parameters:
        - name: email
          in: path
          description: email of account to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  /origins:
    post:
      tags:
        - origin
      summary: Create new origin
      responses:
        '200':
          description: successful creation of the origin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginsResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Origins'
    get:
      tags:
        - origin
      summary: Get all origins
      description: return all the  origins
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginsList'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/origins/{name}':
    get:
      tags:
        - origin
      summary: Find origins by ID
      description: Returns a single origins
      operationId: getOriginByName
      parameters:
        - name: name
          in: path
          description: name of origins to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginsResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  /services:
    get:
      tags:
        - services
      description: Returns all services
      summary: Get all the services
      operationId: find services
      responses:
        '200':
          description: services response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesList'
        '404':
          description: services not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
    post:
      tags:
        - services
      summary: Create new DNS service
      responses:
        '200':
          description: successful creation of the DNS service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesDNSResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Services'
  '/services/{servicesid}':
    get:
      tags:
        - services
      summary: Find services by ID
      description: Returns a single service
      operationId: getServiceById
      parameters:
        - name: servicesid
          in: path
          description: ID of service to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesLBResponse'
        '404':
          description: service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/endpoints':
    post:
      tags:
        - endpoints
      summary: Create new endpoints
      responses:
        '200':
          description: successful creation of endpoints
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/EndpointsResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Endpoints'
    get:
      tags:
        - endpoints
      description: Returns all endpoints
      summary: "Get all endpoints"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointsList'
        '404':
          description: endpoints not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/endpoints/{EndpointsId}':
    get:
      tags:
        - endpoints
      summary: Find endpoints by ID
      description: Returns a single endpoints
      operationId: getEndpointById
      parameters:
        - name: EndpointsId
          in: path
          description: ID of endpoint to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointsResponse'
        '404':
          description: endpoints not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/endpoints/assembly/{id}':
    get:
      tags:
        - endpoints
      description: Returns all endpoints by assembly
      summary : Find endpoint by assembly id
      operationId: getEndpointByAssembly
      parameters:
        - name: id
          in: path
          description: assembly id of endpoints to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointsList'
        '404':
          description: endpoints not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  /datacenters:
    post:
      tags:
        - datacenters
      summary: Create new datacenter
      responses:
        '200':
          description: datacenter created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatacenterResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Datacenters'
    get:
      tags:
        - datacenters
      summary: "Get all datacenter"
      description: Returns all datacenter
      operationId: find datacenter
      responses:
        '200':
          description: datacenter response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatacenterList'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: network not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/datacenters/{datacenterId}':
    get:
      tags:
        - datacenters
      summary: Find datacenter by ID
      description: Returns a single datacenter
      operationId: getDatacenterById
      parameters:
        - name: datacenterId
          in: path
          description: ID of datacenter to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatacenterResponse'
        '500':
          description: Can't connect with database, blockchain (or) other systems for processing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: datacenter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  /storagespool:
    post:
      tags:
        - storagespool
      summary: Create new storaglepool
      responses:
        '200':
          description: successful creation of storagepool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragesPoolResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoragesPool'
    get:
      tags:
        - storagespool
      summary: "Get all storagespool"
      description: Returns all storages
      operationId: find storages
      responses:
        '200':
          description: storages response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragesPoolList'
        '404':
          description: storagepool not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/storageconnectors/{storageconnectorId}/storagespool':
    get:
      tags:
        - storagespool
      summary: Find storagespool by connector ID
      description: Returns all storagepool list by connector id
      operationId: getstoragespoolById
      parameters:
        - name: storageconnectorId
          in: path
          description: ID of storagespool to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragesPoolList'
        '404':
          description: storagepool not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/storagespool/{Id}':
    get:
      tags:
         - storagespool
      summary: Get storagespool by Id
      operationId: getStoragePoolById
      parameters:
        - name: Id
          in: path
          description: ID of storagespool to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: storages response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragesPoolResponse'
        '404':
          description: storagepool not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/storagespool/{storagepoolId}/status':
    put:
      tags:
        - storagespool
      summary: update storagespool status by ID
      description: Update  storagespool status
      operationId: getStoragePoolById
      parameters:
        - name: storagepoolId
          in: path
          description: ID of storagespool to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful update operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragesPoolResponse'
        '404':
          description: storagepool not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
  '/auth/saml/providers':
    post:
      tags:
        - saml
      summary: add new saml provider
      description: Adds an item to the saml provider
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SamlResponse'
        '400':
          description: invalid input
        '500':
          description: internal server error
        '409':
          description: input conflict
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Saml'
    get:
      tags:
        - saml
      description: Returns all saml providers
      summary: all saml providers
      operationId: find saml provider
      responses:
        '200':
          description: saml providers response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SamlList'

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/auth/saml/providers/{ProviderId}':
    get:
      tags:
        - saml
      summary: Find saml provider by ID
      description: Returns a single saml provider
      operationId: getsamlProviderById
      parameters:
        - name: ProviderId
          in: path
          description: ID of saml provider to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SamlResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/SamlResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Assembly not found
        '500':
          description: Inter server Error
  '/auth/oidc/providers/{providerId}' :
    post:
      tags:
        - oidc
      summary: add new open id provider
      description: Adds an item to the open id provider
      parameters:
        - name: providerId
          in: path
          description: ID of provider to create
          required: true
          schema:
            type: string
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIdResponse'
        '400':
          description: invalid input
        '500':
          description: internal server error
        '409':
          description: input conflict
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenId'
  '/auth/oidc/providers':
    get:
      tags:
        - oidc
      description: Returns all open id providers
      summary: all open id providers
      operationId: find open id provider
      responses:
        '200':
          description: open id providers response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIdList'
        '404':
          description: oidc provider not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/auth/oidc/providers/{ProviderId}':
    get:
      tags:
        - oidc
      summary: Find open id provider by ID
      description: Returns a single openid provider
      operationId: getOidcProviderById
      parameters:
        - name: ProviderId
          in: path
          description: ID of openid provider to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIdResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/OpenIdResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: openid not found
        '500':
          description: Inter server Error
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/accounts/{account_id}/assemblyfactorys':
    post:
      tags:
        - assemblyfactorys
      summary: Create new assemblyfactorys
      parameters:
        - name: account_id
          in: path
          description: id of the account
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful creation of the assembly factory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyFactoryResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssemblyFactory'
    get:
      tags:
        - assemblyfactorys
      summary: Get all the assembly factorys by account id
      description: Returns all assemblyfactorys by account_id
      operationId: getAssemblyFactoryByAccount
      parameters:
        - name: account_id
          in: path
          description: account_id of assemblyfactory to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyFactoryList'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: assembly factory not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /assemblyfactorys:
    get:
      tags:
        - assemblyfactorys
      summary: Returns all assemblyfactorys
      operationId: find assemblyfactorys
      responses:
        '200':
          description: assemblyfactorys response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyFactoryList'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: assembly factory not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/assemblyfactorys/{assemblyFactoryId}':
    get:
      tags:
        - assemblyfactorys
      summary: Find assemblyfactory by ID
      description: Returns a single assemblyfactory
      operationId: getAssemblyFactoryById
      parameters:
        - name: assemblyFactoryId
          in: path
          description: ID of assemblyfactory to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyFactoryResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: assembly factory not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/assemblyfactorys/{assemblyFactoryId}/status':
    put:
      tags:
        - assemblyfactorys
      summary: update assemblyfactory status by ID
      description: Update  assemblyfactory status
      operationId: getAssemblyFactoryById
      parameters:
        - name: assemblyFactoryId
          in: path
          description: ID of assemblyfactory to return
          required: true
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyFactoryReadyResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: assembly factory not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadyStatus'
  '/assemblyfactorys/{assemblyFactoryId}/describe':
    get:
      tags:
        - assemblyfactorys
      summary: Find assemblys by  assemblyfactory ID
      description: Returns all assemblys
      operationId: getAssemblyFactoryById
      parameters:
        - name: assemblyFactoryId
          in: path
          description: parentId of assembly in assembly factory to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyList'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: assembly factory not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: Can't connect with database, blockchain (or) other systems for processing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/horizontalscaling':
    post:
      tags:
        - horizontalscaling
      summary: Create new horizontalscaling
      responses:
        '200':
          description: successful creation of horizontal scaling
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HorizontalScalingResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HorizontalScaling'
    get:
      tags:
        - horizontalscaling
      summary: Get all horizontal scaling
      description: Returns all Horizontal scaling
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HorizontalScalingList'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: horizontal scaling not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/horizontalscaling/{HorizontalScalingId}':
    put:
      tags:
        - horizontalscaling
      summary: Update horizontalscaling by ID
      description: Returns updated single horizontalscaling
      operationId: getHorizontalScalingById
      parameters:
        - name: HorizontalScalingId
          in: path
          description: ID of horizontalscaling to return
          required: true
          schema:
            type: string
      responses:  
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HorizontalScalingResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: horizontal scaling not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HorizontalScaling'
  '/horizontalscaling/{HorizontalScalingId}/status':
    put:
      tags:
        - horizontalscaling
      summary: update horizontalscaling status by ID
      description: Update  horizontalscaling status
      operationId: UpdateHSById
      parameters:
        - name: HorizontalScalingId
          in: path
          description: ID of horizontalscaling to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HorizontalScalingStatusUpdateResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: horizontal scaling not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HSstatus'
  '/horizontalscaling/{HorizontalScalingId}/scale':
    get:
      tags:
        - horizontalscaling
      summary: Scale up assembly factory
      description: Create assembly by the assembly factory scale up using HS
      parameters:
        - name: HorizontalScalingId
          in: path
          description: ID of horizontal scaling
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful scale up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyFactoryReadyResponse'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: horizontal scaling not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/horizontalscaling/assemblyfactory/{AssemblyFactoryId}':
    get:
      tags:
        - horizontalscaling
      summary: Get horizontalscaling assembly factory id
      parameters:
        - name: AssemblyFactoryId
          in: path
          description: ID of the assembly factory
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HorizontalScalingStatusUpdateResponse'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: horizontal scaling not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/horizontalscaling/{AssemblyFactoryId}/metrics(ques)source={sourceName}&job={jobName}':
    get:
      tags:
        - horizontalscaling
      summary: Get assembly factory metrics
      description: Returns all assemblys metrics
      parameters:
        - name: AssemblyFactoryId
          in: path
          description: ID of assembly factory
          required: true
          schema:
            type: string
        - name: sourceName
          in: path
          description: name of the source to get machine/container metric(Ex - container_cpu_user_seconds_total/node_cpu)
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: name of the job to get machine/container metric(Ex - rioos_sh_containers/rioos_sh_machines)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricResponse'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: metrics not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /roles :
    post:
      tags:
        - roles
      summary: add new role
      description: Adds an item to the role
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesResponse'
        '400':
          description: invalid input
        '500':
          description: internal server error
        '409':
          description: input conflict
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roles'
    get:
      tags:
        - roles
      description: Returns all roles
      summary: all roles
      operationId: Role
      responses:
        '200':
          description: roles response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesList'

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/roles/{id}':
    get:
      tags:
        - roles
      summary: Find role by ID
      description: Returns single role
      operationId: getRoleById
      parameters:
        - name: id
          in: path
          description: ID of openid provider to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/RolesResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Assembly not found
        '500':
          description: Inter server Error
  /permissions :
    post:
      tags:
        - permissions
      summary: add new permissions
      description: Adds an item to the permissions
      responses:
        '201':
          description: created
        '400':
          description: invalid input
        '500':
          description: internal server error
        '409':
          description: input conflict
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permissions'
    get:
      tags:
        - permissions
      description: Returns all permissions
      summary: all permissions
      operationId: find permissions
      responses:
        '200':
          description: permissions response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsList'

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/permissions/{Id}':
    get:
      tags:
        - permissions
      summary: Find permissionsr by ID
      description: Returns a single permissions
      operationId: getPermissionById
      parameters:
        - name: Id
          in: path
          description: ID of permission to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Assembly not found
        '500':
          description: Inter server Error
  '/permissions/roles/{RolesId}':
    get:
      tags:
        - permissions
      summary: Find permissionsr by ID
      description: Returns a single permissions
      operationId: getPermissionById
      parameters:
        - name: RolesId
          in: path
          description: ID of permission to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/OidcResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Assembly not found
        '500':
          description: Inter server Error
  '/permissions/{Id}/roles/{RolesId}':
    get:
      tags:
        - permissions
      summary: Find permissionsr by ID
      description: Returns a single permissions
      operationId: getPermissionById
      parameters:
        - name: Id
          in: path
          description: ID of permission to return
          required: true
          schema:
            type: string
        - name: RolesId
          in: path
          description: ID of the Roles
          required: true
          schema:
            type: string


      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Assembly not found
        '500':
          description: Inter server Error
  /nodes:
    post:
      tags:
        - nodes
      summary: Create new nodes
      responses:
        '200':
          description: successful creation of the node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Nodes'
    get:
      tags:
        - nodes
      summary: Returns all nodes
      operationId: find nodes
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesList'
        '404':
          description: nodes not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/nodes/{nodeid}':
    get:
      tags:
        - nodes
      summary: Find nodes by ID
      description: Returns a single node
      operationId: getNodeById
      parameters:
        - name: nodeid
          in: path
          description: ID of node to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesResponse'
        '404':
          description: node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/accounts/{Id}/secrets':
    post:
      tags:
        - secrets
      summary: Create new secrets
      description: create new secret by account id
      parameters:
        - name: Id
          in: path
          description: ID of account to create
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful creation of the secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secrets'
    get:
      tags:
        - secrets
      summary: Returns all secrets by account
      operationId: find secrets by account
      parameters:
        - name: Id
          in: path
          description: ID of account secret to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsList'
        '404':
          description: secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /secrets:
    get:
      tags:
        - secrets
      summary: Returns all secrets
      operationId: find secrets
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsList'
        '404':
          description: secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/secrets/{secretsId}':
    get:
      tags:
        - secrets
      summary: Find secrets by ID
      description: Returns a single secret
      operationId: getSecretById
      parameters:
        - name: secretsId
          in: path
          description: ID of secret to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsResponse'
        '404':
          description: secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/origins/{Origin}/secrets/{SecretName}':
    get:
      tags:
        - secrets
      summary: Returns secrets by origin and secret name
      operationId: getSecretsByOriginAndSecret
      parameters:
        - name: Origin
          in: path
          description: origin name  of secrets to return
          required: true
          schema:
            type: string
        - name: SecretName
          in: path
          description: secret name  of secrets to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsResponse'
        '404':
          description: secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/origins/{origin}/serviceaccounts':
    post:
      tags:
        - serviceaccounts
      summary: Create new serviceaccounts
      operationId: CreateServiceAccountByOrigin
      parameters:
        - name: origin
          in: path
          description: name of the origin to create service account
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful creation of service account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountsResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccounts'
  '/origins/{origin}/serviceaccounts/{ServiceAccount}':
    get:
      tags:
        - serviceaccounts
      summary: Get service accounts by origin and service account name
      operationId: getServiceAccountsByOriginAndName
      parameters:
        - name: origin
          in: path
          description: origin name  of service account to return
          required: true
          schema:
            type: string
        - name: ServiceAccount
          in: path
          description: service account name to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountsResponse'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '404':
          description: service account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
    put:
      tags:
        - serviceaccounts
      summary: Update service accounts service account name and origin
      operationId: updateServiceAccountsByNameAndOrigin
      parameters:
        - name: ServiceAccount
          in: path
          description: service account id to update
          required: true
          schema:
            type: string
        - name: origin
          in: path
          description: origin name to update service account
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretUpdateServiceAccountsResponse'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '404':
          description: service account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretUpdate'
  '/serviceaccounts/{ServiceAccountName}':
    get:
      tags:
        - serviceaccounts
      summary: Get service accounts service account name
      operationId: getServiceAccountsByName
      parameters:
        - name: ServiceAccountName
          in: path
          description: service account name to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretUpdateServiceAccountsResponse'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '404':
          description: service account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  /serviceaccounts:
    get:
      tags:
        - serviceaccounts
      summary: Get all service accounts
      operationId: serviceaccount
      responses:
        '200':
          description: service accounts response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountsList'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '404':
          description: service account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  /networks:
    post:
      tags:
        - networks
      summary: Create new network
      responses:
        '200':
          description: successful creation of network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworksResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Networks'
    get:
      tags:
        - networks
      summary: Get all networks
      description: Returns all networks
      operationId: find networks
      responses:
        '200':
          description: network response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworksList'
        '404':
          description: network not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '401':
          description:  Unauthorized authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
  '/networks/{id}':
    get:
      tags:
        - networks
      summary: Get network by ID
      description: Return single network data
      operationId: getNetworkById
      parameters:
        - name: id
          in: path
          description: ID of network to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworksResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: network not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
    put:
      tags:
        - networks
      summary: Update network by ID
      description: Returns updated single network
      operationId: getNetworkById
      parameters:
        - name: id
          in: path
          description: ID of network to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworksResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '401':
          description:  UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        '402':
          description:  Must have entitlement to use Rio/OS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/402Error'
        '403':
          description: "Forbidden, Must have roles and permission to perform action on the resource."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: network not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Can't connect with database, blockchain (or) other systems for processing."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Networks'

  /storageconnectors:
    post:
      tags:
        - storageconnectors
      summary: Create new storageconnectors
      responses:
        '200':
          description: successful creation of storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageConnectorsResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageConnectors'
    get:
      tags:
        - storageconnectors
      summary: Get all storageconnectors
      description: Returns all storageconnectors
      operationId: find storageconnectors
      responses:
        '200':
          description: storageconnectors response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageConnectorsList'
        '404':
          description: storage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/storageconnectors/{Id}':
    put:
      tags:
        - storageconnectors
      summary: Update storageconnectors by ID
      description: Returns updated single storageconnectors
      operationId: getstorageconnectorsById
      parameters:
        - name: Id
          in: path
          description: ID of storageconnectors to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageConnectorsResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '404':
          description: storage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
    get:
      tags:
        - storageconnectors
      summary: Find storageconnectors by ID
      description: Returns a single storageconnectors
      operationId: getstorageconnectorsById
      parameters:
        - name: Id
          in: path
          description: ID of storageconnectors to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageConnectorsResponse'
        '404':
          description: storage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/storageconnectors/{Id}/status':
    put:
      tags:
        - storageconnectors
      summary: update storageconnectors status by ID
      description: Update  storageconnectors status
      operationId: getstorageconnectorsById
      parameters:
        - name: Id
          in: path
          description: ID of storageconnectors to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageConnectorsResponse'
        '404':
          description: storage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
  '/ldap/config':
    post:
      tags:
        - ldap
      summary: add new ldap
      description: Adds an item to the ldap
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LdapConfigResponse'
        '400':
          description: invalid input
        '500':
          description: internal server error
        '409':
          description: input conflict
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapConfig'
  /jobs:
    post:
      tags:
        - jobs
      summary: Create new job
      responses:
        '200':
          description: successful creation of job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsResponse'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Jobs'
    get:
      tags:
        - jobs
      summary: Get all jobs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsList'
  '/jobs/node(ques)node_id={nodeId}':
    get:
      tags:
        - jobs
      summary: Find jobs by node id
      description: Returns a single job
      operationId: getJobsByNodeId
      parameters:
        - name: nodeId
          in: path
          description: ID of node to return job
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsResponse'
        '404':
          description: job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/jobs/{jobId}/status':
    put:
      tags:
        - jobs
      summary: update job status
      operationId: updateJobById
      parameters:
        - name: jobId
          in: path
          description: Id of job to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsResponse'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
  /plans:
    post:
      tags:
        - plan
      summary: Create plan factory
      responses:
        200':
          description: successful creation of the plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
    get:
      tags:
        - plan
      description: Get all  plans
      summary: Return all plan
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanList'
        '404':
          description: "plans not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/plans/{id}':
    get:
      tags:
        - plan
      summary: Find plan by ID
      description: Returns a single plan
      operationId: getPlanById
      parameters:
        - name: id
          in: path
          description: ID of plan to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  /verticalscaling:
    post:
      tags:
        - verticalscaling
      summary: Create new Vertical scaling
      responses:
        '200':
          description: successful creation of vertical scaling
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerticalScalingResponse'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerticalScaling'
    get:
      tags:
        - verticalscaling
      summary: Get all vertical scaling
      description: Return all the vertical scaling
      responses:
        '200':
          description: successful opertaion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerticalScalingList'
        '404':
          description: vertical scaling  not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/verticalscaling/{VerticalScalingId}':
    put:
      tags:
        - verticalscaling
      summary: Update vertical scaling by id
      operationId: updateVerticalScalingById
      parameters:
        - name: VerticalScalingId
          in: path
          description: ID of vertical scaling to update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerticalScalingResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '404':
          description: verical scaling not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerticalScaling'
  '/verticalscaling/scale/{id}':
    get:
      tags:
        - verticalscaling
      summary:  vertical scale up/down
      description: scale by id
      operationId: scaleById
      parameters:
        - name: id
          in: path
          description: ID of vertical scale up or down
          required: true
          schema:
            type: string
      responses:
        '404':
          description: verical scale not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsResponse'
  '/verticalscaling/{id}/status':
    put:
      tags:
        - verticalscaling
      summary: Update vertical scaling status
      description: Update vertical scaling status by id
      operationId: updateVerticalScalingStatusById
      parameters:
        - name: id
          in: path
          description: ID of vertical scaling status to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerticalStatus'
      responses:
        '404':
          description: verical scaling not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerticalScalingResponse'
  /volumes:
    post:
      tags:
        - volumes
      summary: Create new Volumes
      responses:
        '200':
          description: successful creation of volume
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumesResponse'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Volumes'
  '/volumes/{id}':
    get:
      tags:
        - volumes
      summary: Get volume by id
      description: "Return volume by volume id"
      operationId: getVolumeById
      parameters:
        - name: id
          in: path
          description: ID of the volume return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumesResponse'
        '404':
          description: volume not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
    put:
      tags:
        - volumes
      summary: Update volume by id
      operationId: updateVolumeById
      parameters:
        - name: id
          in: path
          description: ID of volume to update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumesResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '404':
          description: volume not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Volumes'
  '/volumes/{id}/status':
    put:
      tags:
        - volumes
      summary: Update volume status by id
      operationId: updateVolumeStausById
      parameters:
        - name: id
          in: path
          description: ID of volume status to update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumesResponse'
        '400':
          description: |
            Must supply required fields

            Can't parse body, as its invalid/malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        '404':
          description: volume not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
  '/assemblys/{id}/volumes':
    get:
      tags:
        - volumes
      summary: Get all volumes by assembly id
      description: Return all volumes by assembly id
      operationId: getVolumesByAssemblyId
      parameters:
        - name: id
          in: path
          description: ID of the assembly volumes return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumesList'
        '404':
          description: volumes not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  /settingsmap:
    post:
      tags:
        - settingsmap
      summary: Create new Settings map
      responses:
        '200':
          description: successful creation of settings map
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsMapResponse'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsMap'
  '/origins/{origin}/settingsmap/{name}':
    get:
      tags:
        - settingsmap
      summary: Get settings map by origin and settingsmap name
      description: "Return settingsmap by settingsmap name and origin name"
      operationId: getSettingMapByIdAndOrigin
      parameters:
        - name: origin
          in: path
          description: name of the origin return
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: name of the settingsmap return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsMapResponse'
        '404':
          description: settingsmap not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
  '/logs/{assembly_id}(ques)range=10m&limits=1':
    get:
      tags:
        - logs
      summary: Get logs by assembly id
      parameters:
        - name: assembly_id
          in: path
          description: ID of the assembly logs return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResponse'
        '404':
          description: "Assembly log not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Inflexdb connection refused"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/logs(ques)limits=1&range=15m':
    get:
      tags:
        - logs
      summary: Get all the assembly logs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResponse'
        '404':
          description: "Assemblys log not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "Inflexdb connection refused"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/image/{ImageName}/vulnerablity':
    get:
      tags:
        - image
      summary: Get vulnerablity check response of Image
      parameters:
        - name: ImageName
          in: path
          description: Name of the image vulnerablity return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerResponse'
        '404':
          description: "image not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "anchore connection refused"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/accounts/{accountId}/audits':
    post:
      tags:
        - audit
      summary: Create new audit by account id
      parameters:
        - name: accountId
          in: path
          description: Id of the account user audit return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful creation audit using account id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditListResponse'
        '500':
          description: "Blockchain Connection refused"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Audit'
    get:
      tags:
        - audit
      summary: Get all audits for the account id
      parameters:
        - name: accountId
          in: path
          description: Id of the account user audit return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditList'
        '404':
          description: "audit not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "blockchain connection refused"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/buildconfig':
    post:
      tags:
        - buildconfig
      summary: Create new build config
      responses:
        '200':
          description: successful creation build config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildConfigResponse'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildConfig'
    get:
      tags:
        - buildconfig
      summary: Get all build config
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildConfigList'
        '404':
          description: "build config not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/buildconfig/{id}':
    get:
      tags:
        - buildconfig
      summary: Get build config by id
      parameters:
        - name: id
          in: path
          description: Id of the build config to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildConfigResponse'
        '404':
          description: "build config not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/buildconfig/assemblyfactorys/{id}':
    get:
      tags:
        - buildconfig
      summary: Get build config by assembly factory id
      parameters:
        - name: id
          in: path
          description: Id of the assembly factory to return build config
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildConfigResponse'
        '404':
          description: "build config not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/builds':
    post:
      tags:
        - build
      summary: Create new build
      responses:
        '200':
          description: successful creation builds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildResponse'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Build'
    get:
      tags:
        - build
      summary: Get all builds
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildList'
        '404':
          description: "build not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/builds/{id}':
    get:
      tags:
        - build
      summary: Get build by id
      parameters:
        - name: id
          in: path
          description: Id of the build  to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildResponse'
        '404':
          description: "build not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/builds/buildconfig/{id}':
    get:
      tags:
        - build
      summary: Get build by build config id
      parameters:
        - name: id
          in: path
          description: Id of the build config to return builds
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildResponse'
        '404':
          description: "build not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  '/imageref':
    post:
      tags:
        - imageref
      summary: Create new image reference
      responses:
        '200':
          description: successful creation imageref
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageRefResponse'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageRef'

  '/imageref/{id}':
    get:
      tags:
        - imageref
      summary: Get image reference by id
      parameters:
        - name: id
          in: path
          description: Id of the imageref  to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageRefResponse'
        '404':
          description: "imageref not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '500':
          description: "DB error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
components:
  schemas:
    Assembly:
      type: object
      properties:
        object_meta:
          type: object
          required:
            - name
            - uid
            - account
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rough-bush-86341.svc.local"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: "AssemblyFactory"
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: "v1"
                  name:
                    type: string
                    description: "Name of the referent."
                    example: "rough-bush-8634.svc.local"
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: "87543211234567876"
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        status:
          type: object
          properties:
            phase:
              type: string
              example: "pending"
    AssemblyResponse:
      type: object
      properties:
        id:
          type: string
          example: "849703502417502208"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rough-bush-86341.svc.local"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: "chennai"
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: "AssemblyFactory"
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: "v1"
                  name:
                    type: string
                    description: "Name of the referent."
                    example: "rough-bush-8634.svc.local"
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: "87543211234567876"
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: "Assembly"
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: "v1"
        selector:
          type: object
          description: "selector to restrict the list of returned objects by their labels. Defaults to everything"
        metadata:
          type: object
        status:
          $ref: '#/components/schemas/AssemblyReadyStatus'
        spec:
          type: object
          properties:
            metrics:
              type: object
              properties:
                849703502417502208:
                  type: string
                  example: "98.99999999999999"
                  description: "value of the assembly metric"
            endpoints:
              $ref: '#/components/schemas/EndpointsResponse'
            assembly_factory:
              $ref: '#/components/schemas/AssemblyFactoryResponse'
            volumes:
              type: array
              items:
                $ref: '#/components/schemas/VolumesResponse'
    AssemblyList:
      type: object
      properties:
        kind:
          type: string
          description: "kind is a string value representing the REST resource this object represents."
          example: AssemblyList
        api_version:
          type: string
          description: "api version defines the versioned schema of this representation of an object"
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/AssemblyResponse'
    Services:
      type: object
      properties:
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rough-bush-8634.svc.local"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: "chennai"
            owner_references:
              type: array
              required:
               - uid
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - name: "rough-bush-8634.svc.local"
                  kind: "AssemblyFactory"
                  api_version: "v1"
                  uid: "87543211234567876"
                  block_owner_deletion: true
        spec:
           $ref: '#/components/schemas/DNSSpec'
        status:
          $ref: '#/components/schemas/Status'
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    ServicesList:
      type: object
      properties:
        kind:
          type: string
          description: "kind is a string value representing the REST resource this object represents."
          example: ServicesList
        api_version:
          type: string
          description: "api version defines the versioned schema of this representation of an object"
          example: v1
        items:
            $ref: '#/components/schemas/ServiceList'
    ServicesDNSResponse:
      type: object
      properties:
        id:
          type: string
          example: '87653212345011113'
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: Service
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rough-bush-8634.svc.local"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: "chennai"
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: "AssemblyFactory"
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: "v1"
                  name:
                    type: string
                    description: "Name of the referent."
                    example: "rough-bush-8634.svc.local"
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: "87543211234567876"
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        spec:
           $ref: '#/components/schemas/DNSSpec'
        status:
          $ref: '#/components/schemas/Status'
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    ServicesLBResponse:
      type: object
      properties:
        id:
          type: string
          example: '87653212345011112'
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: Service
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rough-bush-8634.svc.local"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
              
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: "AssemblyFactory"
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: "v1"
                  name:
                    type: string
                    description: "Name of the referent."
                    example: "rough-bush-8634.svc.local"
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: "87543211234567876"
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        spec:
           $ref: '#/components/schemas/LBSpec'
        status:
          $ref: '#/components/schemas/Status'
        metadata:
          type: object
          description: "Standard object's metadata. Can contain optional label selector team, origin"
          properties:
            rioos_sh_loadbalancer_imagein:
              type: string
              example: "container"
            rioos_sh_loadbalancer_imagename:
              type: string
              example: "registry.rioos.xyz:5000/rioos/loadbalancer"
            rioos_sh_loadbalancer_cpu:
              type: string
              example: "1"
            rioos_sh_loadbalancer_memory:
              type: string
              example: "1024 MiB"
            rioos_sh_loadbalancer_disk:
              type: string
              example: "1 GiB"
    ServicesResponse:
      type: object
      properties:
        id:
          type: string
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
            account:
              type: string
              description: "account  defines the id the user account"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                  api_version:
                    type: string
                    description: " API version of the referent."
                  name:
                    type: string
                    description: "Name of the referent."
                  uid:
                    type: string
                    description: "UID of the referent."
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
        spec:
           $ref: '#/components/schemas/ServiceSpec'
        status:
          $ref: '#/components/schemas/Status'
        metadata:
          type: object
          description: "Standard object's metadata. Can contain optional label selector team, origin"
          properties:
            rioos_sh_loadbalancer_imagein:
              type: string
              example: "container"
            rioos_sh_loadbalancer_imagename:
              type: string
              example: "registry.rioos.xyz:5000/rioos/loadbalancer"
            rioos_sh_loadbalancer_cpu:
              type: string
              example: "1"
            rioos_sh_loadbalancer_memory:
              type: string
              example: "1024 MiB"
            rioos_sh_loadbalancer_disk:
              type: string
              example: "1 GiB"
        created_at:
          type: string
    ServiceList:
      type: array
      items:
        $ref: '#/components/schemas/ServicesResponse'
      example:
        - id: "87653212345011113"
          type_meta: {"kind": "Service","api_version":"v1"}
          object_meta: {"name": "rough-bush-8634.svc.local","account": "870109412813971456","created_at": "2017-12-11T11:29:50.547529+00:00","deleted_at": "","deletion_grace_period_seconds": 30,"cluster_name": "","labels": {},"annotations": {},"initializers": {"pending": [],"result": {"type_meta": {"kind": "","api_version": ""},"status": "","message": "","reason": "","details": { "name": "","group": "","kind": "", "causes": [],"uid": "","retry_after_seconds": 0},"code": 0}},  "finalizers": [""],"owner_references": [{"kind": "AssemblyFactory","api_version": "v1","name": "rough-bush-8634.svc.local","uid": "87543211234567876","block_owner_deletion": false}]}
          spec: {"service_type": "ExternalName","loadbalancer_ip": "","names": {"849703502417502208": "rough-bush-86341.svc.local"},"external_names": {}}
          status: {"phase": "ready","message": "","reason": "","conditions": [{"message": " ","reason": " ","status": " ","last_transition_time": " ","last_update_time": " ","last_probe_time": " ","condition_type": " "}]}
          metadata: {}
          created_at: "2017-12-11T11:29:50.547529+00:00"
        - id: "87653212345011112"
          type_meta: {"kind": "Service","api_version":"v1"}
          object_meta: {"name": "rough-bush-8634.svc.local","account": "870109412813971456","created_at": "2017-12-11T11:29:50.547529+00:00","deleted_at": "","deletion_grace_period_seconds": 30,"cluster_name": "","labels":{} ,"annotations": {},"initializers": {"pending": [],"result": { "type_meta": {"kind": "", "api_version": ""},"status": "","message": "", "reason": "","details": { "name": "", "group": "", "kind": "","causes": [], "uid": "","retry_after_seconds": 0  }, "code": 0}},"finalizers": [""],"owner_references": [{"kind": "AssemblyFactory","api_version": "v1","name": "rough-bush-8634.svc.local","uid": "87543211234567876","block_owner_deletion": false}]}
          spec: {"service_type": "LoadBalancer","loadbalancer_ip": "","names": {}, "external_names": {}}
          status: {"phase": "ready","message": "","reason": "", "conditions": [{ "message": " ", "reason": " ","status": " ", "last_transition_time": " ","last_update_time": " ","last_probe_time": " ","condition_type": " "}]}
          metadata: {"rioos_sh_loadbalancer_imagein": "container","rioos_sh_loadbalancer_imagename": "registry.rioos.xyz:5000/rioos/loadbalancer","rioos_sh_loadbalancer_cpu": "1","rioos_sh_loadbalancer_memory": "1024 MiB","rioos_sh_loadbalancer_disk": "1 GiB"}
          created_at: "2017-12-11T11:29:50.547529+00:00"
    Accounts:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: "email of the user"
          example: "john.doe@riocorp.io"
        first_name:
          type: string
          description: "first name of the user"
          example: "John"
        last_name:
          type: string
          description: "last name of the user"
          example: "Doe"
        phone:
          type: string
          description: "contact number of the user"
          example: "2128778998"
        company_name:
          type: string
          description: "company name is where the user works"
          example: "RioCorp Inc"
        password:
          type: string
          description: "password of the user"
          example: "cool4rio"
        registration_ip_address:
          type: string
          description: "registration ip address of the user"
          example: "49.91.88.72"
    AccountResponse:
      type: object
      properties:
        id:
          type: string
          description: "id an unique identifier in systems of record. Generated during creation of the account"
          example: "870109412813971456"
        email:
          type: string
          description: "email of the user"
          example: "john.doe@riocorp.io"
        first_name:
          type: string
          description: "first name of the user"
          example: John
        last_name:
          type: string
          description: "last name of the user"
          example: "Doe"
        token:
          type: string
          description:  "tolen for individual user"
          example: "s50FFjIeorAWwiby8V"
        api_key:
          type: string
          description: "a persistenant personal access token is required to authenticate to Rio/OS  in the following situations:  1. When you don't want to login and use the ephermeal authorization tokens. This should be used with caution."
          example:  "13308159845101687816"
        flags:
          type: string
          description: "flag of the user"
          example: 0
        roles:
          type: array
          description: "roles are Rio/OS role label that applies to the user"
          items:
            type: string
            example: "default"
    AccountsResponse:
      type: object
      properties:
        id:
          type: string
          description: "id an unique identifier in systems of record. Generated during creation of the account"
          example: "870109412813971456"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "John Doe"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: "Accounts"
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: "v1"
        email:
          type: string
          description: "email of the user"
          example: "john.doe@riocorp.io"
        first_name:
          type: string
          description: "first name of the user"
          example: "John"
        last_name:
          type: string
          description: "last name of the user"
          example: "Doe"
        phone:
          type: string
          description: "contact number of the user"
          example: "2128778998"
        avatar:
          type: object
          description: "avatar picture to identity the user"
        company_name:
          type: string
          description: "company name is where the user works"
          example: "RioCorp Inc"
        provider:
          type: object
          description: "provider for the user"
        password:
          type: string
          description: "password of the user"
          example: "$rpbkdf2$0$AAAEAA==$UzvvpotwoFZIuKAcZGqwCw==$yVPSOU3Lh6g7HIzuppVerEpLirrMbCCn0PB7OIWj75Q=$"
        api_key:
          type: string
          description: "a persistenant personal access token is required to authenticate to Rio/OS  in the following situations:  1. When you don't want to login and use the ephermeal authorization tokens. This should be used with caution."
          example: "8025312526126804015"
        approval:
          type: boolean
          description: "approved user or not"
          example: false
        suspend:
          type: boolean
          description: "user suspend or not   If true, the user is suspended. Defaults to false"
          example: false
        registration_ip_address:
          type: string
          description: "registration ip address of the user"
          example: "49.91.88.72"
        roles:
          type: array
          description: "roles are Rio/OS role label that applies to the user"
          items:
            type: string
            example: "default"
        created_at:
          type: string
          description: "created_at is a timestamp representing the server time when this account was created. "
          example: "2017-12-11T11:29:50.547529+00:00"
    Origins:
      type: object
      required:
        - name
        - account
      properties:
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rioosapi"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        name:
          type: string
          description: "Name of the organization. This fields is same as ObjectMeta.name"
          example: "rioosapi"
    OriginsList:
      type: object
      properties:
        kind:
          type: string
          description: "kind is a string value representing the REST resource this object represents."
          example: OriginsList
        api_version:
          type: string
          description: "api version defines the versioned schema of this representation of an object"
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/OriginsResponse'
    OriginsResponse:
      type: object
      properties:
        id:
          type: string
          example: "890765432123456789"
        name:
          type: string
          description: "Name of the organization. This fields is same as ObjectMeta.name"
          example: "rioosapi"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: "Origin"
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: "v1"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rioosapi"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    TypeMeta:
      type: object
      properties:
        kind:
          type: string
          example: v
        api_version:
          type: string
          example: v
    AssemblyReadyStatus:
      type: object
      description: "Status is a return value for calls that don't return other objects."
      properties:
        phase:
          type: string
          example: "Booting"
        message:
          type: string
          description: "A human-readable description of the status of this operation."
          example: "assembly initializing deployment process on node(918760340378886144)"
        reason:
          type: string
          description: "A machine-readable description of why this operation is in the Failure status."
          example: "assembly created successfully"
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Conditions'
          example:
            - message: ""
              reason: ""
              status: "False"
              last_transition_time: ""
              last_update_time: ""
              last_probe_time: ""
              condition_type:  "AssemblyStorageReady"
            - message: ""
              reason: ""
              status: "False"
              last_transition_time: ""
              last_update_time: ""
              last_probe_time: ""
              condition_type:  "AssemblyNetworkReady"
            - message: ""
              reason: ""
              status: ""
              last_transition_time: ""
              last_update_time: ""
              last_probe_time: ""
              condition_type:  "BluePrintReady"
            - message: ""
              reason: ""
              status: ""
              last_transition_time: ""
              last_update_time: ""
              last_probe_time: ""
              condition_type:  "NetworkBridgeReady"
            - message: ""
              reason: ""
              status: "True"
              last_transition_time: ""
              last_update_time: ""
              last_probe_time: ""
              condition_type:  "NetworkAddressReady"
            - message: "storage created successfully"
              reason: "storage ready"
              status: "True"
              last_transition_time: "2018-02-21 15:01:32.273066485 +0530 IST m=+104.737210572"
              last_update_time: ""
              last_probe_time: "2018-02-21 15:01:32.273081375 +0530 IST m=+104.737225407"
              condition_type:  "ImageNotCloned"
            - message: ""
              reason: ""
              status: "True"
              last_transition_time: ""
              last_update_time: ""
              last_probe_time: ""
              condition_type:  "StorageReady"
            - message: ""
              reason: ""
              status: "True"
              last_transition_time: ""
              last_update_time: ""
              last_probe_time: ""
              condition_type:  "HypervisorReady"


    Conditions:
      type: object
      properties:
        message:
          type: string
          description: "A human readable message indicating details about the transition."
        reason:
          type: string
          description: "The reason for the condition's last transition. (camelcased reason like NotReadyNode)"
        status:
          type: string
          description: "Status of the condition, one of True, False, Unknown."
        last_transition_time:
          description: "Last time the condition transitioned from one status to another."
          type: string
        last_update_time:
          type: string
          description: "The last time this condition was updated."
        last_probe_time:
          type: string
          description: "Last time the condition was checked."
        condition_type:
          type: string
          description: "Type of condition."

    Status:
      type: object
      description: "Status is a return value for calls that don't return other objects."
      properties:
        phase:
          type: string
          example: "ready"
        message:
          type: string
          description: "A human-readable description of the status of this operation."
          example: ""
        reason:
          type: string
          description: "A machine-readable description of why this operation is in the Failure status."
          example: ""
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Conditions'
          example:
            - message: " "
              reason: " "
              status: " "
              last_transition_time: " "
              last_update_time: " "
              last_probe_time: " "
              condition_type:  " "
    ReadyStatus:
      type: object
      description: "Status is a return value for calls that don't return other objects."
      properties:
        phase:
          type: string
          example: "ready"
        message:
          type: string
          description: "A human-readable description of the status of this operation."
          example: ""
        reason:
          type: string
          description: "A machine-readable description of why this operation is in the Failure status."
          example: ""
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Conditions'
          example:
            - message: ""
              reason: ""
              status: ""
              last_transition_time: ""
              last_update_time: ""
              last_probe_time: ""
              condition_type:  ""
    AssemblyFactory:
      type: object
      required:
        - replicas
        - plan
        - resources
      properties:
        object_meta:
          type: object
          required:
            - name
            - account
            - cluster_name
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rough-bush-8634.svc.local"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: "chennai"
        replicas:
          type: integer
          description: "Replicas is the number of desired replicas of the plan"
          example: 1
        resources:
          type: object
          description: "cpu, ram, disk, compute: cpu/gpu, storage: hdd/ssd"
          required:
            - cpu
            - memory
            - storage
            - private_ipv4
            - compute_type
            - storage_type
          properties:
            cpu:
              type: string
              example: "1"
            memory:
              type: string
              example: "3 GiB"
            storage:
              type: string
              example: "3 GiB"
            private_ipv4:
              type: string
              example: "true"
            compute_type:
              type: string
              example: "cpu"
            storage_type:
              type: string
              example: "hdd"
        secret:
          type: object
          description: "Secret references to the secret for user and other sensitive information. If this is not provided, Login operation will fail."
          required:
            - id
          properties:
            id:
              type: string
              description: "id of the secret"
              example: "890765432345678010"
        plan:
          type: string
          description: "A Plan is meta-data that provides a description of the artifacts that make up an application, the services that are required to execute or utilize those artifacts, and the relationship of the artifacts to those services. Plans are expressed as json under a /plans resource.    Here we provide the identifier as pointed to /plans"
          example: "870109412813971451"
        status:
          type: object
          required:
            - phase
          properties:
            phase:
              type: string
              description: "status of the assembly factory"
              example: "pending"
    AssemblyFactoryList:
      type: object
      properties:
        kind:
          type: string
          description: "kind is a string value representing the REST resource this object represents."
          example: AssemblyFactoryList
        api_version:
          type: string
          description: "api version defines the versioned schema of this representation of an object"
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/AssemblyFactoryResponse'
    AssemblyFactoryResponse:
      type: object
      properties:
        id:
          type: string
          example: "87543211234567876"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: AssemblyFactory
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rough-bush-8634.svc.local"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: "chennai"
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              type: object
              description:  "An initializer is a controller which enforces some system invariant at object creation time."
              properties:
                pending:
                  type: array
                  description: "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
                  items:
                    type: object
                  example: []
                result:
                  type: object
                  description: "If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion."
                  properties:
                    type_meta:
                      type: object
                      properties:
                        kind:
                          type: string
                          example: ""
                        api_version:
                          type: string
                          example: ""
                    status:
                      type: string
                      description: " status of the operation. One of: Success or Failure"
                      example: ""
                    message:
                      type: string
                      description: "a human-readable description of the status of this operation."
                      example: ""
                    reason:
                      type: string
                      description: "a machine-readable description of why this operation is in the Failure status. If this value is empty there is no     information available. a Reason clarifies an HTTP status  code but does not override it."
                      example: ""
                    details:
                      type: object
                      description: "atatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response"
                      properties:
                        name:
                          type: string
                          description: "the name attribute of the resource associated with the status StatusReason"
                          example: ""
                        group:
                          type: string
                          description: "the group attribute of the resource associated with the status StatusReason."
                          example: ""
                        kind:
                          type: string
                          description: "the kind attribute of the resource associated with the status StatusReason."
                          example: ""
                        causes:
                          type: array
                          description: "the Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
                          items:
                            type: object
                          example: []
                        uid:
                          type: string
                          description: "UID of the resource."
                          example: ""
                        retry_after_seconds:
                          description: "if specified, the time in seconds before the operation should be retried."
                          type: integer
                          example: 0
                    code:
                      type: integer
                      description: "suggested HTTP return code for this status, 0 if not set."
                      example: 0
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: "orphan"
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
              example: []
        replicas:
          type: integer
          description: "Replicas is the number of desired replicas of the plan"
          example: 1
        resources:
          type: object
          description: "cpu, ram, disk, compute: cpu/gpu, storage: hdd/ssd"
          properties:
            cpu:
              type: string
              example: "1"
            memory:
              type: string
              example: "3 GiB"
            storage:
              type: string
              example: "3 GiB"
            private_ipv4:
              type: string
              example: "true"
            compute_type:
              type: string
              example: "cpu"
            storage_type:
              type: string
              example: "hdd"
        secret:
          type: object
          description: "Secret references to the secret for user and other sensitive information. If this is not provided, Login operation will fail."
          properties:
            id:
              type: string
              description: "id of the secret"
              example: "890765432345678010"
        plan:
          type: string
          description: "A Plan is meta-data that provides a description of the artifacts that make up an application, the services that are required to execute or utilize those artifacts, and the relationship of the artifacts to those services. Plans are expressed as json under a /plans resource.    Here we provide the identifier as pointed to /plans"
          example: "870109412813971451"
        status:
          type: object
          properties:
            phase:
              type: string
              example: "pending"
            message:
              type: string
              description: "A human-readable description of the status of this operation."
              example: ""
            reason:
              type: string
              description: "A machine-readable description of why this operation is in the Failure status."
              example: ""
            conditions:
              type: array
              items:
                type: object
              example: []
        spec:
          type: object
          properties:
            tolerations:
              type: array
              items:
                type: object
              example: []
            restart_policy:
              type: string
              example: ""
              description: "Always: Restart Container; Pod phase stays Running. OnFailure: Restart Container; Pod phase stays Running."
            node_selector:
              type: object
              description: "nodeSelector is the simplest form of constraint. It specifies a map of key-value pairs. "
            affinity:
              type: object
              description: "The affinity/anti-affinity feature, expands the types of constraints you can express"
              properties:
                assemblyfactory_affinity:
                  type: string
                  example: ""
            plan:
              $ref: '#/components/schemas/PlanResponse'
            services:
              $ref: '#/components/schemas/ServicesDNSResponse'
        metadata:
          type: object
          description: "Standard object's metadata. Can contain optional label selector team, origin"
        created_at:
          type: string
          example: "2017-12-11T11:29:50.547529+00:00"
    AssemblyFactoryReadyResponse:
      type: object
      properties:
        id:
          type: string
          example: "87543211234567876"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: AssemblyFactory
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rough-bush-8634.svc.local"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: "chennai"
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              type: object
              description:  "An initializer is a controller which enforces some system invariant at object creation time."
              properties:
                pending:
                  type: array
                  description: "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
                  items:
                    type: object
                  example: []
                result:
                  type: object
                  description: "If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion."
                  properties:
                    type_meta:
                      type: object
                      properties:
                        kind:
                          type: string
                          example: ""
                        api_version:
                          type: string
                          example: ""
                    status:
                      type: string
                      description: " status of the operation. One of: Success or Failure"
                      example: ""
                    message:
                      type: string
                      description: "a human-readable description of the status of this operation."
                      example: ""
                    reason:
                      type: string
                      description: "a machine-readable description of why this operation is in the Failure status. If this value is empty there is no     information available. a Reason clarifies an HTTP status  code but does not override it."
                      example: ""
                    details:
                      type: object
                      description: "atatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response"
                      properties:
                        name:
                          type: string
                          description: "the name attribute of the resource associated with the status StatusReason"
                          example: ""
                        group:
                          type: string
                          description: "the group attribute of the resource associated with the status StatusReason."
                          example: ""
                        kind:
                          type: string
                          description: "the kind attribute of the resource associated with the status StatusReason."
                          example: ""
                        causes:
                          type: array
                          description: "the Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
                          items:
                            type: object
                          example: []
                        uid:
                          type: string
                          description: "UID of the resource."
                          example: ""
                        retry_after_seconds:
                          description: "if specified, the time in seconds before the operation should be retried."
                          type: integer
                          example: 0
                    code:
                      type: integer
                      description: "suggested HTTP return code for this status, 0 if not set."
                      example: 0
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: "orphan"
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
              example: []
        replicas:
          type: integer
          description: "Replicas is the number of desired replicas of the plan"
          example: 1
        resources:
          type: object
          description: "cpu, ram, disk, compute: cpu/gpu, storage: hdd/ssd"
          properties:
            cpu:
              type: string
              example: "1"
            memory:
              type: string
              example: "3 GiB"
            storage:
              type: string
              example: "3 GiB"
            private_ipv4:
              type: string
              example: "true"
            compute_type:
              type: string
              example: "cpu"
            storage_type:
              type: string
              example: "hdd"
        secret:
          type: object
          description: "Secret references to the secret for user and other sensitive information. If this is not provided, Login operation will fail."
          properties:
            id:
              type: string
              description: "id of the secret"
              example: "890765432345678010"
        plan:
          type: string
          description: "A Plan is meta-data that provides a description of the artifacts that make up an application, the services that are required to execute or utilize those artifacts, and the relationship of the artifacts to those services. Plans are expressed as json under a /plans resource.    Here we provide the identifier as pointed to /plans"
          example: "870109412813971451"
        status:
          type: object
          properties:
            phase:
              type: string
              example: "ready"
            message:
              type: string
              description: "A human-readable description of the status of this operation."
              example: ""
            reason:
              type: string
              description: "A machine-readable description of why this operation is in the Failure status."
              example: ""
            conditions:
              type: array
        spec:
          type: object
          properties:
            tolerations:
              type: array
              items:
                type: object
              example: []
            restart_policy:
              type: string
              example: ""
              description: "Always: Restart Container; Pod phase stays Running. OnFailure: Restart Container; Pod phase stays Running."
            node_selector:
              type: object
              description: "nodeSelector is the simplest form of constraint. It specifies a map of key-value pairs. "
            affinity:
              type: object
              description: "The affinity/anti-affinity feature, expands the types of constraints you can express"
              properties:
                assemblyfactory_affinity:
                  type: string
                  example: ""
            plan:
              $ref: '#/components/schemas/PlanResponse'
            services:
              $ref: '#/components/schemas/ServiceList'
        metadata:
          type: object
          description: "Standard object's metadata. Can contain optional label selector team, origin"
        created_at:
          type: string
          example: "2017-12-11T11:29:50.547529+00:00"
        
        
    AssemblyFactoryGet:
      type: object
      properties:
        id:
          type: string
          example: "87543211234567876"
        created_at:
          type: string
          example: ""
        name:
          type: string
          example: "ubuntu"
        uri:
          type: string
          example: "/v1/assemblys/assembly_factorys"
        description:
          type: string
          example: "ubuntuinstallation"
        tags:
          type: array
          items:
            type: string
            example: "ubuntu"
        origin:
          type: string
          example: "rioos"
        replicas:
          type: integer
          example: 5
        properties:
          type: object
          properties:
            domain:
              type: string
              example: "megambox.com"
            cloudsetting:
              type: string
              example: "/clouds/one"
            region:
              type: string
              example: "chennai"
            storage_type:
              type: string
              example: "ssd"
        plan:
          type: string
          example: "/v3/plan/ubuntu"
        plan_data:
          $ref: '#/components/schemas/PlanResponse'
        external_management_resource:
          type: array
          items:
            type: string
            example: ""
        component_collection:
          type: object
          properties:
            flavor:
              type: string
              example: "/url"
            network:
              type: string
              example: "/url"
        status:
          $ref: '#/components/schemas/Status'
        opssettings:
          type: object
          properties:
            nodeselector:
              type: string
              example: ""
            priority:
              type: string
              example : ""
            nodename:
              type: string
              example: ""
            restartpolicy:
              type: string
              example: ""
    ObjectMeta:
      type: object
      properties:
        name:
          type: string
          description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
          example: "rough-bush-8634.svc.local"
        account:
          type: string
          description: "account  defines the id the user account"
          example: "876543219000"
        created_at:
          type: string
          description: "created_at is a timestamp representing the server time when this object was created. "
          example: "2017-12-11T11:29:50.547529+00:00"
        deleted_at:
          type: string
          description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
          example: "2017-12-11T11:29:50.547529+00:00"
        deletion_grace_period_seconds:
          type: integer
          description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
          example: 30
        cluster_name:
          type: string
          description: "The name of the cluster(datacenter/location) which the object belongs to."
          example: "clus01"
        labels:
          type: object
          description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
          properties:
            rioos_environment:
              type: string
              example: "development"
            rioos_category:
              type: string
              example: "machine"
        annotations:
          type: object
          description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
          properties:
            rioos/karthika.calvincare.org/apply:
              type: string
              example: "OnHeadBald"
            rioos/ruchi.calvincare.org/pickup:
              type: string
              example: "OnHungry"
        initializers:
          type: object
          description:  "An initializer is a controller which enforces some system invariant at object creation time."
          properties:
            loadbalancer:
              type: string
              example: "standup"
        finalizers:
          type: array
          description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
          items:
            type: string
            example: "orphan"
        owner_references:
          type: array
          description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
          items:
            type: object
            properties:
              kind:
                type: string
                description: "Kind of the referent."
                example: "Node"
              api_version:
                type: string
                description: " API version of the referent."
                example: "V1"
              name:
                type: string
                description: "Name of the referent."
                example: "ddd"
              uid:
                type: string
                description: "UID of the referent."
                example: ""
              block_owner_deletion:
                type: boolean
                description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                example: true
    DNSSpec:
      type: object
      properties:
        service_type:
          type: string
          description: "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field.type determines how the Service is exposed."
          example: ExternalName
        loadbalancer_ip:
          type: string
          description: "The IP address created and attached to access the loadbalancer."
          example: ""
        names:
          type: object
          description: "name(internal) is the reference that internal powerdns will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName"
          properties:
            849703502417502208:
              type: string
              example: "rough-bush-8634.svc.local"
        external_names:
          type: object
          description: "ExternalName maps to a public dns . Rio/OS automatically figures out the ip address is public or private."
    LBSpec:
      type: object
      properties:
        service_type:
          type: string
          description: "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field.type determines how the Service is exposed."
          example: LoadBalancer
        loadbalancer_ip:
          type: string
          description: "The IP address created and attached to access the loadbalancer."
          example: ""
        names:
          type: object
          description: "name(internal) is the reference that internal powerdns will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName"
        external_names:
          type: object
          description: "ExternalName maps to a public dns . Rio/OS automatically figures out the ip address is public or private."
    ServiceSpec:
      type: object
      properties:
        service_type:
          type: string
          description: "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field.type determines how the Service is exposed."
        loadbalancer_ip:
          type: string
          description: "The IP address created and attached to access the loadbalancer."
        names:
          type: object
          description: "name(internal) is the reference that internal powerdns will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName"
        external_names:
          type: object
          description: "ExternalName maps to a public dns . Rio/OS automatically figures out the ip address is public or private."
    Endpoints:
      type: object
      properties:
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rough-bush-86341.svc.local"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: "chennai"
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: "AssemblyFactory"
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: "v1"
                  name:
                    type: string
                    description: "Name of the referent."
                    example: "rough-bush-8634.svc.local"
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: "89878987654432342"
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        subsets:
          type: object
          description: "the set of all endpoints is the union of all subsets."
          properties:
            addresses:
              type: array
              description: "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize."
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: "the must be a network service name (private_ipv4, public_ip4, private_ipv6, public_ipv6) for the addresses."
                    example: "876542345676542345"
                  ip:
                    type: string
                    description: "What IP to bind the external port to."
                    example: "192.168.1.11"
                  protocol_version:
                    type: string
                    description: "protocol for port. Must be UDP or TCP or HTTP."
                    example: "private_ipv4"
                  mac_address:
                    type: string
                    description: "mac address of the device"
                    example: "00:0a:95:9d:68:16"
            unready_addresses:
              type: array
              description: "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check."
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "876542345676542346"
                    description: "the must be a network service name (private_ipv4, public_ip4, private_ipv6, public_ipv6) for the addresses."
                  ip:
                    type: string
                    example: "192.168.1.20"
                    description: "What IP to bind the external port to."
                  protocol_version:
                    type: string
                    example: "private_ipv4"
                    description: protocol for port. Must be UDP or TCP or HTTP.
                  mac_address:
                    type: string
                    description: "mac address of the device"
                    example: "00:0a:95:9d:68:17"
            ports:
              type: array
              description: "Port numbers available on the related IP addresses."
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: "name of the port"
                    example: ""
                  port:
                    type: string
                    description: "type of the port"
                    example: "8080"
                  protocol:
                    type: string
                    description: "version of the port"
                    example: "tcp/udp/http"
    EndpointsList:
      type: object
      properties:
        kind:
          type: string
          example: EndpointsList
          description: "kind is a string value representing the REST resource this object represents."
        api_version:
          type: string
          description: "api version defines the versioned schema of this representation of an object"
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/EndpointsResponse'
    EndpointsResponse:
      type: object
      properties:
        id:
          type: string
          example: '890098765432120987'
        type_meta:
          type: object
          properties:
            kind:
              type: string
              example: Endpoint
              description: "kind is a string value representing the REST resource this object represents."
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rough-bush-86341.svc.local"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: "chennai"
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: "AssemblyFactory"
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: "v1"
                  name:
                    type: string
                    description: "Name of the referent."
                    example: "rough-bush-8634.svc.local"
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: "89878987654432342"
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        subsets:
          type: object
          description: "the set of all endpoints is the union of all subsets."
          properties:
            addresses:
              type: array
              description: "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize."
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: "the must be a network service name (private_ipv4, public_ip4, private_ipv6, public_ipv6) for the addresses."
                    example: "876542345676542345"
                  ip:
                    type: string
                    description: "What IP to bind the external port to."
                    example: "192.168.1.11"
                  protocol_version:
                    type: string
                    description: "protocol for port. Must be UDP or TCP or HTTP."
                    example: "private_ipv4"
                  mac_address:
                    type: string
                    description: "mac address of the device"
                    example: "00:0a:95:9d:68:16"
            unready_addresses:
              type: array
              description: "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check."
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "876542345676542346"
                    description: "the must be a network service name (private_ipv4, public_ip4, private_ipv6, public_ipv6) for the addresses."
                  ip:
                    type: string
                    example: "192.168.1.20"
                    description: "What IP to bind the external port to."
                  protocol_version:
                    type: string
                    example: "private_ipv4"
                    description: protocol for port. Must be UDP or TCP or HTTP.
                  mac_address:
                    type: string
                    description: "mac address of the device"
                    example: "00:0a:95:9d:68:17"
            ports:
              type: array
              description: "Port numbers available on the related IP addresses."
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: "name of the port"
                    example: ""
                  port:
                    type: string
                    description: "type of the port"
                    example: "8080"
                  protocol:
                    type: string
                    description: "version of the port"
                    example: "tcp/udp/http"
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"

    HorizontalScaling:
      type: object
      required:
        - state
        - scale_type
      properties:
        scale_type:
          type: string
          description: "There are two types of  horizontal scaler. “MANUALHS”, “AUTOHS”"
          example: AUTOHS
        state:
          type: string
          description: "The state represents when controller apply the scaling rule on assemblies."
          example: "ABLETOSCALE"
        spec:
          type: object
          properties:
            min_replicas:
              type: integer
              description: "Min_replicas is the lower limit for the number of replicas to which the horizontalscaler can scale down"
              example: 4
            max_replicas:
              type: integer
              description: "Max Replicas is the upper limit for the number of replicas to which the horizontalscaler can scale up. It cannot be less than minReplicas"
              example: 5
            scale_up_wait_time:
              type: integer
              description: " wait minutes for the after last scale action for scale up"
              example: 5
            scale_down_wait_time:
              type: string
              description: " wait minutes for the after last scale action for scale down"
              example: "5"
            metrics:
              type: array
              items:
                type: object
                properties:
                  metric_type:
                    type: string
                    description: "`Type` is the type of metric source.  It should be one of Object,  Resource, each mapping to a matching field in the object."
                    example: "Resource"
                  object:
                    type: object
                    description: "`Object` refers to a metric describing a single rioos object. (for example, hits-per-second on an Services:Loadbalancer object)."
                    properties:
                      target:
                        type: string
                        description: "`Target`:  Target is the described Rioos object. (example Services)"
                        example: hits_as_per_second
                      target_value:
                        type: integer
                        description: "`TargetValue` is the target value of the metric (as a quantity)."
                        example: 1000
                      metric_time_spec:
                        type: object
                        description: "`scale_up_by` `scale_up_wait_time`, ..down..: Control the rate of scaling in two ways, both for scaling up and for scaling down. We can define how many instances are added or removed, and set a delay."
                        properties:
                          scale_up_by:
                            type: string
                            example: "1"
                          scale_down_by:
                            type: string
                            example: "1"
                  resource:
                    type: object
                    required:
                      - min_target_value
                      - max_target_value
                    description: "`Resource` refers to a resource metric (such as those specified in requests and limits) known to rioos describing each assembly in the current scale target (e.g. CPU or memory).Such metrics are built in to Rioos, and have special scaling options on top of those available to normal per-assembly metrics using the 'AssemblyFactory' source."
                    properties:
                      name:
                        type: string
                        description: "`Name` is the name of the metric in question."
                        example: "cpu"
                      min_target_value:
                        type: string
                        description: "`MinTargetValue` is the percentage of the resource to scale down"
                        example: "20"
                      max_target_value:
                        type: string
                        description: "`MaxTargetValue`  is the percentage of the resource to scale up"
                        example: "80"
                      metric_time_spec:
                        type: object
                        description: "`scale_up_by` `scale_up_wait_time`, ..down..: Control the rate of scaling in two ways, both for scaling up and for scaling down. We can define how many instances are added or removed, and set a delay."
                        properties:
                          scale_up_by:
                            type: string
                            example: "1"
                          scale_down_by:
                            type: string
                            example: "1"
        status:
          type: object
          properties:
            current_replicas:
              type: integer
              description: "`current_replicas` is current number of replicas of assemblys managed by this horizontalscaler, as last seen by the horizontalscaler."
              example: 1
            desired_replicas:
              type: integer
              description: "`desired_replicas` is the desired number of replicas of assemblys managed by this horizontalscaler, as last calculated by the horizontalscaler."
              example: 1
        object_meta:
          type: object
          required:
            - name
            - account
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "hscale"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            owner_references:
              type: array
              required:
               - uid
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - name: "rough-bush-8634.svc.local"
                  kind: "AssemblyFactory"
                  api_version: "v1"
                  uid: "87543211234567876"
                  block_owner_deletion: true
    HorizontalScalingResponse:
      type: object
      properties:
        id:
          type: string
          example: "876543212345671234"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              example: HorizontalScaling
            api_version:
              type: string
              example: v1
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "hscale"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              required:
               - uid
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - name: "rough-bush-8634.svc.local"
                  kind: "AssemblyFactory"
                  api_version: "v1"
                  uid: "87543211234567876"
                  block_owner_deletion: true
        scale_type:
          type: string
          description: "There are two types of  horizontal scaler. “MANUALHS”, “AUTOHS”"
          example: AUTOHS
        state:
          type: string
          description: "The state represents when controller apply the scaling rule on assemblies."
          example: "ABLETOSCALE"
        metadata:
          type: object
          description: "Standard object's metadata. Can contain optional label selector team, origin"
        spec:
          type: object
          properties:
            min_replicas:
              type: integer
              description: "Min_replicas is the lower limit for the number of replicas to which the horizontalscaler can scale down"
              example: 4
            max_replicas:
              type: integer
              description: "Max Replicas is the upper limit for the number of replicas to which the horizontalscaler can scale up. It cannot be less than minReplicas"
              example: 5
            scale_up_wait_time:
              type: integer
              description: " wait minutes for the after last scale action for scale up"
              example: 5
            scale_down_wait_time:
              type: integer
              description: " wait minutes for the after last scale action for scale down"
              example: 5
            metrics:
              type: array
              items:
                type: object
                properties:
                  metric_type:
                    type: string
                    description: "`Type` is the type of metric source.  It should be one of Object,  Resource, each mapping to a matching field in the object."
                    example: "Resource"
                  object:
                    type: object
                    description: "`Object` refers to a metric describing a single rioos object. (for example, hits-per-second on an Services:Loadbalancer object)."
                    properties:
                      target:
                        type: string
                        description: "`Target`:  Target is the described Rioos object. (example Services)"
                        example: hits_as_per_second
                      target_value:
                        type: integer
                        description: "`TargetValue` is the target value of the metric (as a quantity)."
                        example: 1000
                      metric_time_spec:
                        type: object
                        description: "`scale_up_by` `scale_up_wait_time`, ..down..: Control the rate of scaling in two ways, both for scaling up and for scaling down. We can define how many instances are added or removed, and set a delay."
                        properties:
                          scale_up_by:
                            type: string
                            example: "1"
                          scale_down_by:
                            type: string
                            example: "1"
                  resource:
                    type: object
                    description: "`Resource` refers to a resource metric (such as those specified in requests and limits) known to rioos describing each assembly in the current scale target (e.g. CPU or memory).Such metrics are built in to Rioos, and have special scaling options on top of those available to normal per-assembly metrics using the 'AssemblyFactory' source."
                    properties:
                      name:
                        type: string
                        description: "`Name` is the name of the metric in question."
                        example: "memory"
                      min_target_value:
                        type: string
                        description: "`MinTargetValue` is the percentage of the resource to scale down"
                        example: "20"
                      max_target_value:
                        type: string
                        description: "`MaxTargetValue`  is the percentage of the resource to scale up"
                        example: "80"
                      metric_time_spec:
                        type: object
                        description: "`scale_up_by` `scale_up_wait_time`, ..down..: Control the rate of scaling in two ways, both for scaling up and for scaling down. We can define how many instances are added or removed, and set a delay."
                        properties:
                          scale_up_by:
                            type: string
                            example: "1"
                          scale_down_by:
                            type: string
                            example: "1"
        status:
          type: object
          properties:
            last_scale_time:
              type: string
              description: "`last_scale_time` is the last time the HorizontalScaler scaled the number of assemblys,  used by the horizontalscaler to control how often the number of assemblys is changed."
              example: ""
            current_replicas:
              type: integer
              description: "`current_replicas` is current number of replicas of assemblys managed by this horizontalscaler, as last seen by the horizontalscaler."
              example: 1
            desired_replicas:
              type: integer
              description: "`desired_replicas` is the desired number of replicas of assemblys managed by this horizontalscaler, as last calculated by the horizontalscaler."
              example: 1
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    HorizontalScalingStatusUpdateResponse:
      type: object
      properties:
        id:
          type: string
          example: "876543212345671234"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              example: HorizontalScaling
            api_version:
              type: string
              example: v1
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "hscale"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              required:
               - uid
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - name: "rough-bush-8634.svc.local"
                  kind: "AssemblyFactory"
                  api_version: "v1"
                  uid: "87543211234567876"
                  block_owner_deletion: true
        scale_type:
          type: string
          description: "There are two types of  horizontal scaler. “MANUALHS”, “AUTOHS”"
          example: AUTOHS
        state:
          type: string
          description: "The state represents when controller apply the scaling rule on assemblies."
          example: "ABLETOSCALE"
        metadata:
          type: object
          description: "Standard object's metadata. Can contain optional label selector team, origin"
        spec:
          type: object
          properties:
            min_replicas:
              type: integer
              description: "Min_replicas is the lower limit for the number of replicas to which the horizontalscaler can scale down"
              example: 4
            max_replicas:
              type: integer
              description: "Max Replicas is the upper limit for the number of replicas to which the horizontalscaler can scale up. It cannot be less than minReplicas"
              example: 5
            scale_up_wait_time:
              type: integer
              description: " wait minutes for the after last scale action for scale up"
              example: 5
            scale_down_wait_time:
              type: integer
              description: " wait minutes for the after last scale action for scale down"
              example: 5
            metrics:
              type: array
              items:
                type: object
                properties:
                  metric_type:
                    type: string
                    description: "`Type` is the type of metric source.  It should be one of Object,  Resource, each mapping to a matching field in the object."
                    example: "Resource"
                  object:
                    type: object
                    description: "`Object` refers to a metric describing a single rioos object. (for example, hits-per-second on an Services:Loadbalancer object)."
                    properties:
                      target:
                        type: string
                        description: "`Target`:  Target is the described Rioos object. (example Services)"
                        example: hits_as_per_second
                      target_value:
                        type: integer
                        description: "`TargetValue` is the target value of the metric (as a quantity)."
                        example: 1000
                      metric_time_spec:
                        type: object
                        description: "`scale_up_by` `scale_up_wait_time`, ..down..: Control the rate of scaling in two ways, both for scaling up and for scaling down. We can define how many instances are added or removed, and set a delay."
                        properties:
                          scale_up_by:
                            type: string
                            example: "1"
                          scale_down_by:
                            type: string
                            example: "1"
                  resource:
                    type: object
                    description: "`Resource` refers to a resource metric (such as those specified in requests and limits) known to rioos describing each assembly in the current scale target (e.g. CPU or memory).Such metrics are built in to Rioos, and have special scaling options on top of those available to normal per-assembly metrics using the 'AssemblyFactory' source."
                    properties:
                      name:
                        type: string
                        description: "`Name` is the name of the metric in question."
                        example: "memory"
                      min_target_value:
                        type: string
                        description: "`MinTargetValue` is the percentage of the resource to scale down"
                        example: "20"
                      max_target_value:
                        type: string
                        description: "`MaxTargetValue`  is the percentage of the resource to scale up"
                        example: "80"
                      metric_time_spec:
                        type: object
                        description: "`scale_up_by` `scale_up_wait_time`, ..down..: Control the rate of scaling in two ways, both for scaling up and for scaling down. We can define how many instances are added or removed, and set a delay."
                        properties:
                          scale_up_by:
                            type: string
                            example: "1"
                          scale_down_by:
                            type: string
                            example: "1"
        status:
          type: object
          properties:
            last_scale_time:
              type: string
              description: "`last_scale_time` is the last time the HorizontalScaler scaled the number of assemblys,  used by the horizontalscaler to control how often the number of assemblys is changed."
              example: "2018-03-20T19:09:10+05:30"
            current_replicas:
              type: integer
              description: "`current_replicas` is current number of replicas of assemblys managed by this horizontalscaler, as last seen by the horizontalscaler."
              example: 1
            desired_replicas:
              type: integer
              description: "`desired_replicas` is the desired number of replicas of assemblys managed by this horizontalscaler, as last calculated by the horizontalscaler."
              example: 2
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    HorizontalScalingList:
      type: object
      properties:
        kind:
          type: string
          example: 'HorizontalScalingList'
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/HorizontalScalingResponse'


    StoragesPool:
      type: object
      required:
        - name
        - connector_id
      properties:
        connector_id:
          type: string
          description: "id that refer the where is that storage pool located"
          example: "827345531373101056"
        storage_info:
          type: object
          properties:
            disks:
              type: array
              items:
                type: object
                properties:
                  disk:
                    type: string
                    description: "name of the disk"
                    example: "/dev/sdb1"
                  disk_type:
                    type: string
                    description: "type of the disk"
                    example: "/dev/sdb0"
                  point:
                    type: string
                    description: "mount path of the disk"
                    example: "/home"
                  size:
                    type: string
                    description: "total size of the disk"
                    example: "500 GiB"
                  used_size:
                    type: string
                    description: "used size of the disk"
                    example: "200 GiB"
        parameters:
          type: object
          description: "Parameters holds the parameters for the provisioner that should,create volumes of this storage class."
        status:
          $ref: '#/components/schemas/Status'
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "sto1"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            intializers:
             $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
    StoragesPoolList:
      type: object
      properties:
        kind:
          type: string
          example: StoragePoolList
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/StoragesPoolResponse'
    StoragesPoolResponse:
      type: object
      properties:
        id:
          type: string
          example: "876534567809876543"
        connector_id:
          type: string
          description: "id that refer the where is that storage pool located"
          example: "827345531373101056"
        storage_info:
          type: object
          properties:
            disks:
              type: array
              items:
                type: object
                properties:
                  disk:
                    type: string
                    description: "name of the disk"
                    example: "/dev/sdb1"
                  disk_type:
                    type: string
                    description: "type of the disk"
                    example: "/dev/sdb0"
                  point:
                    type: string
                    description: "mount path of the disk"
                    example: "/home"
                  size:
                    type: string
                    description: "total size of the disk"
                    example: "500 GiB"
                  used_size:
                    type: string
                    description: "used size of the disk"
                    example: "200 GiB"
        parameters:
          type: object
          description: "Parameters holds the parameters for the provisioner that should,create volumes of this storage class."
        status:
          $ref: '#/components/schemas/Status'
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: StoargePool
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "sto1"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            intializers:
             $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    StorageConnectors:
      type: object
      required:
        - name
        - storage_type
        - host_ip
      properties:
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "str1"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        host_ip:
          type: string
          description: "ip of the server"
          example: "192.168.1.100"
        storage_type:
          type: string
          description: "type of the storage server"
          example: "iscsi"
        parameters:
          type: object
          properties:
            pool_name:
              type: string
              example: "iscsi-pool"
            user_id:
              type: string
              example: "iscsi-user"
            password:
              type: string
              example: "iscsi-password"
        node_info:
          type: object
          properties:
            machine_id:
              type: string
              description: "machineID reported by the node. For unique machine identification in the cluster this field is preferred."
              example: "589f17c8cc084c078c5d364241433afc"
            system_uuid:
              type: string
              description: "systemUUID reported by the node. For unique machine identification"
              example: "85EE9345-A1AF-11E3-BE7C-28E347559DE7"
            kernel_version:
              type: string
              description: "kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
              example: "4.4.0-93-generic"
            os_image:
              type: string
              description: "os image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
              example: "Ubuntu 16.04.3 LTS"
            architecture:
              type: string
              description: "the Architecture reported by the node"
              example: "amd64"
        storage_info:
          type: object
          description: "disk detail for the storage"
          properties:
            disks:
              type: array
              items:
                type: object
                properties:
                  disk:
                    type: string
                    description: "name of the disk"
                    example: "/dev/sdb1"
                  disk_type:
                    type: string
                    description: "type of the disk"
                    example: "/dev/sdb0"
                  point:
                    type: string
                    description: "mount path of the disk"
                    example: "/home"
                  size:
                    type: string
                    description: "total size of the disk"
                    example: "500 GiB"
                  used_size:
                    type: string
                    description: "used size of the disk"
                    example: "200 GiB"
        status:
          $ref: '#/components/schemas/Status'
    StorageConnectorsResponse:
      type: object
      properties:
        id:
          type: string
          description: "id an unique identifier in systems of record. Generated during creation of the storage connector"
          example: "854312345643223456"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "endpnt1"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            intializers:
             $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              required:
                - uid
                - kind
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: "AssemblyFactory"
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: "v1"
                  name:
                    type: string
                    description: "Name of the referent."
                    example: "rough-bush-8634.svc.local"
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: "89878987654432342"
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        host_ip:
          type: string
          description: "ip of the server"
          example: "192.168.1.100"
        storage_type:
          type: string
          description: "type of the storage server"
          example: "iscsi"
        parameters:
          type: object
          properties:
            pool_name:
              type: string
              example: "iscsi-pool"
            user_id:
              type: string
              example: "iscsi-user"
            password:
              type: string
              example: "iscsi-password"
        storage_info:
          type: object
          description: "disk detail for the storage"
          properties:
            disks:
              type: array
              items:
                type: object
                properties:
                  disk:
                    type: string
                    description: "name of the disk"
                    example: "/dev/sdb1"
                  disk_type:
                    type: string
                    description: "type of the disk"
                    example: "/dev/sdb0"
                  point:
                    type: string
                    description: "mount path of the disk"
                    example: "/home"
                  size:
                    type: string
                    description: "total size of the disk"
                    example: "500 GiB"
                  used_size:
                    type: string
                    description: "used size of the disk"
                    example: "200 GiB"
        node_info:
          type: object
          properties:
            machine_id:
              type: string
              description: "machineID reported by the node. For unique machine identification in the cluster this field is preferred."
              example: "589f17c8cc084c078c5d364241433afc"
            system_uuid:
              type: string
              description: "systemUUID reported by the node. For unique machine identification"
              example: "85EE9345-A1AF-11E3-BE7C-28E347559DE7"
            kernel_version:
              type: string
              description: "kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
              example: "4.4.0-93-generic"
            os_image:
              type: string
              description: "os image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
              example: "Ubuntu 16.04.3 LTS"
            architecture:
              type: string
              description: "the Architecture reported by the node"
              example: "amd64"
            bridges:
              type: array
              description: "list of virtual networking bridge that are created by RioOS"
        status:
          $ref: '#/components/schemas/Status'
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: Storage
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    Networks:
      type: object
      required:
        - network_type
        - subnet_ip
        - netmask
        - gateway
        - bridge_hosts
      properties:
        object_meta:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "net1"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
        network_type:
          type: string
          description: "Different types of networks are distinguished based on their data transfer speed, and their reach. The supported values are `private_ipv4`, `private_ipv6`, `public_ipv4`, `public_ipv6`"
          example: "private_ipv4"
        subnet_ip:
          type: string
          description: "a local subdivision of the network in Classless Inter-Domain Routing (CIDR) notation written as the first address of a network, followed by a slash character (/), and ending with the bit-length of the prefix.For example, 192.168.1.0/24 is the prefix of the Internet Protocol version 4 network starting at the given address, having 24 bits allocated for the network prefix, and the remaining 8 bits reserved for host addressing. The IPv6 address specification 2001:db8::/32 is a large address block with 296 addresses."
          example: "192.168.1.0/24"
        netmask:
          type: string
          description: "indicates the netmask  a range of IP addresses that can be used by this subnet. Example: 255.255.255.0 for IPV4"
          example: "255.255.255.0"
        gateway:
          type: string
          description: "indicates the ipaddress of the gateways which connect networks so the devices on them can communicate"
          example: "192.168.1.1"
        status:
          type: object
          required:
            - phase
          properties:
            phase:
              type: string
              example: "ready"
        bridge_hosts:
          type: object
          description: "host_ip which applicable bridge for this network 192.168.2.0:riopri"
          properties:
            918760340378886144:
              type: string
              example: "riopub4"
    NetworksResponse:
      type: object
      properties:
        id:
          type: string
          description: "id an unique identifier in systems of record. Generated during creation of the network"
          example: "876542345676542345"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: Network
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "net1"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            intializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: "orphan"
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
              example: []
        network_type:
          type: string
          description: "Different types of networks are distinguished based on their data transfer speed, and their reach. The supported values are `private_ipv4`, `private_ipv6`, `public_ipv4`, `public_ipv6`"
          example: "private_ipv4"
        subnet_ip:
          type: string
          description: "a local subdivision of the network in Classless Inter-Domain Routing (CIDR) notation written as the first address of a network, followed by a slash character (/), and ending with the bit-length of the prefix.For example, 192.168.1.0/24 is the prefix of the Internet Protocol version 4 network starting at the given address, having 24 bits allocated for the network prefix, and the remaining 8 bits reserved for host addressing. The IPv6 address specification 2001:db8::/32 is a large address block with 296 addresses."
          example: "192.168.1.0/24"
        netmask:
          type: string
          description: "indicates the netmask  a range of IP addresses that can be used by this subnet. Example: 255.255.255.0 for IPV4"
          example: "255.255.255.0"
        gateway:
          type: string
          description: "indicates the ipaddress of the gateways which connect networks so the devices on them can communicate"
          example: "192.168.1.1"
        used_bits:
          type: array
          description: "list of allocated range ip index "
          items:
            type: integer
          example: []
        status:
          type: object
          description: "Status is a return value for calls that don't return other objects."
          properties:
            phase:
              type: string
              example: "ready"
            message:
              type: string
              description: "A human-readable description of the status of this operation."
              example: ""
            reason:
              type: string
              description: "A machine-readable description of why this operation is in the Failure status."
              example: ""
            conditions:
              type: array
              items:
                type: object
              example: []
        bridge_hosts:
          type: object
          description: "host_ip which applicable bridge for this network 192.168.2.0:riopri"
          properties:
            918760340378886144:
              type: string
              example: "riopub4"
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    NetworksList:
      type: object
      properties:
        kind:
          type: string
          example: NetworkList
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/NetworksResponse'
    StorageConnectorsList:
      type: object
      properties:
        kind:
          type: string
          example: StorageList
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/StorageConnectorsResponse'
    Nodes:
      type: object
      required:
        - node_ip
        - name
      properties:
        node_ip:
          type: string
          description: " ip address of the node"
          example: "72.65.143.2"
        spec:
          type: object
          properties:
            assembly_cidr:
              type: string
              example: ""
            external_id:
              type: string
              description: "external ID of the node assigned by some machine database"
              example: ""
            provider_id:
              type: string
              description: "id of the node assigned by the cloud provider"
              example: ""
            unschedulable:
              type: boolean
              description: "unschedulable controls node schedulability of new pods. By default, node is schedulable."
              example: false
            taints:
              type: array
              description: "places a taint on node node1. The taint has key key, value value, and taint effect NoSchedule."
              items:
                type: object
                properties:
                  key:
                    type: string
                    example: ""
                  value:
                    type: string
                    example: ""
                  effect:
                    type: string
                    example: ""
                  time_added:
                    type: string
                    example: ""
        status:
          type: object
          properties:
            capacity:
              type: object
              description: "Capacity represents the total resources of a node."
              properties:
                cpu:
                  type: string
                  example: "4"
                memory:
                  type: string
                  example: "16331164 KiB"
                storage:
                  type: string
                  example: "16228764 MiB"
            allocatable:
              type: object
              description: "allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity."
              properties:
                cpu:
                  type: string
                  example: "4"
                memory:
                  type: string
                  example: "1633116 KiB"
                storage:
                  type: string
                  example: "16228764 MiB"
            phase:
              type: string
              description: "node phase is the recently observed lifecycle phase of the node."
              example: "pending"
            addresses:
              type: array
              description: "list of addresses reachable to the node."
              items:
                type: object
                properties:
                  node_type:
                    type: string
                    example: "InternalIP"
                  address:
                    type: string
                    example: "192.168.2.1"
            node_info:
              type: object
              description: "set of ids/uuids to uniquely identify the node."
              properties:
                machine_id:
                  type: string
                  description: "machineID reported by the node. For unique machine identification in the cluster this field is preferred."
                  example: "589f17c8cc084c078c5d364241433afc"
                system_uuid:
                  type: string
                  description: "systemUUID reported by the node. For unique machine identification"
                  example: "85EE9345-A1AF-11E3-BE7C-28E347559DE7"
                kernel_version:
                  type: string
                  description: "kernel version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
                  example: "4.4.0-93-generic"
                os_image:
                  type: string
                  description: "os image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
                  example: "Ubuntu 16.04.3 LTS"
                architecture:
                  type: string
                  description: "The Architecture reported by the node"
                  example: "amd64"
                bridges:
                  type: array
                  description: "list of virtual networking bridge that are created by RioOS"
                  items:
                    type: object
                    properties:
                      bridge_name:
                        type: string
                        description: "name of the bridge to be used for virtual networking"
                        example: "riopriv"
                      physical_device:
                        type: string
                        description: "physical network interface that are connected to this bridge"
                        example: "eth0"
                      bridge_type:
                        type: string
                        description: "configured Which type of network to this bridge"
                        example: "linux"
                      network_types:
                        type: array
                        description: "supported networks"
                        items:
                          type: string
                          example: "private_ipv4"
            conditions:
              type: array
              description: "conditions is an array of current observed node conditions."
              items:
                type: object
                properties:
                  condition_type:
                    type: string
                    description: "Type of condition."
                    example: "OutOfDisk"
                  status:
                    type: string
                    description: "status of the condition, one of True, False, Unknown."
                    example: "False"
                  last_probe_time:
                    type: string
                    description: "last time the condition was checked."
                    example: ""
                  last_update_time:
                    type: string
                    description: "the last time this condition was updated."
                    example: ""
                  last_transition_time:
                    type: string
                    description: "last time the condition transitioned from one status to another."
                    example: "2017-09-21T06:35:16Z"
                  reason:
                    type: string
                    description: "the reason for the condition's last transition. (camelcased reason like NotReadyNode)"
                    example: "NodeletHasSufficientDisk"
                  message:
                    type: string
                    description: "a human readable message indicating details about the transition."
                    example: "nodelet has sufficient disk space available"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "private"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
    NodesResponse:
      type: object
      properties:
        id:
          type: string
          example: "918760340378886144"
        node_ip:
          type: string
          description: " ip address of the node"
          example: "72.65.143.2"
        spec:
          type: object
          properties:
            assembly_cidr:
              type: string
              example: ""
            external_id:
              type: string
              description: "external ID of the node assigned by some machine database"
              example: ""
            provider_id:
              type: string
              description: "id of the node assigned by the cloud provider"
              example: ""
            unschedulable:
              type: boolean
              description: "unschedulable controls node schedulability of new pods. By default, node is schedulable."
              example: false
            taints:
              type: array
              description: "places a taint on node node1. The taint has key key, value value, and taint effect NoSchedule."
              items:
                type: object
                properties:
                  key:
                    type: string
                    example: ""
                  value:
                    type: string
                    example: ""
                  effect:
                    type: string
                    example: ""
                  time_added:
                    type: string
                    example: ""
        status:
          type: object
          properties:
            capacity:
              type: object
              description: "Capacity represents the total resources of a node."
              properties:
                cpu:
                  type: string
                  example: "4"
                memory:
                  type: string
                  example: "16331164 KiB"
                storage:
                  type: string
                  example: "16228764 MiB"
            allocatable:
              type: object
              description: "allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity."
              properties:
                cpu:
                  type: string
                  example: "4"
                memory:
                  type: string
                  example: "1633116 KiB"
                storage:
                  type: string
                  example: "16228764 MiB"
            phase:
              type: string
              description: "node phase is the recently observed lifecycle phase of the node."
              example: "pending"
            addresses:
              type: array
              description: "list of addresses reachable to the node."
              items:
                type: object
                properties:
                  node_type:
                    type: string
                    example: "InternalIP"
                  address:
                    type: string
                    example: "192.168.2.1"
            node_info:
              type: object
              description: "set of ids/uuids to uniquely identify the node."
              properties:
                machine_id:
                  type: string
                  description: "machineID reported by the node. For unique machine identification in the cluster this field is preferred."
                  example: "589f17c8cc084c078c5d364241433afc"
                system_uuid:
                  type: string
                  description: "systemUUID reported by the node. For unique machine identification"
                  example: "85EE9345-A1AF-11E3-BE7C-28E347559DE7"
                kernel_version:
                  type: string
                  description: "kernel version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
                  example: "4.4.0-93-generic"
                os_image:
                  type: string
                  description: "os image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
                  example: "Ubuntu 16.04.3 LTS"
                architecture:
                  type: string
                  description: "The Architecture reported by the node"
                  example: "amd64"
                bridges:
                  type: array
                  description: "list of virtual networking bridge that are created by RioOS"
                  items:
                    type: object
                    properties:
                      bridge_name:
                        type: string
                        description: "name of the bridge to be used for virtual networking"
                        example: "riopriv"
                      physical_device:
                        type: string
                        description: "physical network interface that are connected to this bridge"
                        example: "eth0"
                      bridge_type:
                        type: string
                        description: "configured Which type of network to this bridge"
                        example: "linux"
                      network_types:
                        type: array
                        description: "supported networks"
                        items:
                          type: string
                          example: "private_ipv4"
            conditions:
              type: array
              description: "conditions is an array of current observed node conditions."
              items:
                type: object
                properties:
                  condition_type:
                    type: string
                    description: "Type of condition."
                    example: "OutOfDisk"
                  status:
                    type: string
                    description: "status of the condition, one of True, False, Unknown."
                    example: "False"
                  last_probe_time:
                    type: string
                    description: "last time the condition was checked."
                    example: ""
                  last_update_time:
                    type: string
                    description: "the last time this condition was updated."
                    example: ""
                  last_transition_time:
                    type: string
                    description: "last time the condition transitioned from one status to another."
                    example: "2017-09-21T06:35:16Z"
                  reason:
                    type: string
                    description: "the reason for the condition's last transition. (camelcased reason like NotReadyNode)"
                    example: "NodeletHasSufficientDisk"
                  message:
                    type: string
                    description: "a human readable message indicating details about the transition."
                    example: "nodelet has sufficient disk space available"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "private"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: Node
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        created_at:
          type: string
          example:  "2017-09-21T06:51:38.763014+00:00"
    NodesList:
      type: object
      properties:
        kind:
          type: string
          description: "kind is a string value representing the REST resource this object represents."
          example: NodeList
        api_version:
          type: string
          description: "api version defines the versioned schema of this representation of an object"
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/NodesResponse'
    Saml:
      type: object
      properties:
        description:
          type: string
          example: "Login with Fantastic SAML IdP"
        idp_metadata:
          type: string
          example: "<xml metadata from providers like onelogin, openam>"
        sp_base_url:
          type: string
          example: "<callback_url>"
    SamlResponse:
      type: object
      properties:
        id:
          type: string
          example: "890765432123456"
        description:
          type: string
          example: "Login with Fantastic SAML IdP"
        idp_metadata:
          type: string
          example: "<xml metadata from providers like onelogin, openam>"
        sp_base_url:
          type: string
          example: "<callback_url>"
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    SamlList:
      type: object
      properties:
        kind:
          type: string
          example: SamlList
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/SamlResponse'
    OpenId:
      type: object
      properties:
        description:
          type: string
          example: "Login with Google"
        issuer:
          type: string
          example: "https://accounts.google.com"
        base_url:
          type: string
          example: "<callback_url>"
        client_secret:
          type: string
          example: "0909090909 (from console.google)"
        client_id:
          type: string
          example: 0909090909 (from console.google)
        verify_server_certificate:
          type: boolean
          example: true
        ca_certs:
          type: string
          example: ""
    OpenIdResponse:
      type: object
      properties:
        id:
          type: string
          example: "876567553123456"

        description:
          type: string
          example: "Login with Google"
        issuer:
          type: string
          example: "https://accounts.google.com"
        base_url:
          type: string
          example: "<callback_url>"
        client_secret:
          type: string
          example: "0909090909 (from console.google)"
        client_id:
          type: string
          example: 0909090909 (from console.google)
        verify_server_certificate:
          type: boolean
          example: true
        ca_certs:
          type: string
          example: ""
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    OidcResponse:
      type: object
      properties:
        id:
          type: string
          example: "876567553123456"

        description:
          type: string
          example: "Login with Google"
        issuer:
          type: string
          example: "https://accounts.google.com"
        base_url:
          type: string
          example: "<callback_url>"
        client_secret:
          type: string
          example: "0909090909 (from console.google)"
        client_id:
          type: string
          example: 0909090909 (from console.google)
        verify_server_certificate:
          type: boolean
          example: true
        ca_certs:
          type: string
          example: ""
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    OpenIdList:
      type: object
      properties:
        kind:
          type: string
          example: SamlList
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/OpenIdResponse'
    Secrets:
      type: object
      properties:
        secret_type:
          type: string
          example: "opaque"
        data:
          type: object
        metadata:
          type: object
          properties:
            origin:
              type: string
              example: "rioos_system"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "ca"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
    SecretsResponse:
      type: object
      properties:
        id:
          type: string
          example: "890765432345678010"
        metadata:
          type: object
          properties:
            origin:
              type: string
              example: "rioos_system"
        secret_type:
          type: string
          example: "opaque"
        data:
          type: object
        type_meta:
          type: object
          properties:
            kind:
              type: string
              example: Secret
            api_version:
              type: string
              example: v1
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "ca"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    SecretsList:
      type: object
      properties:
        kind:
          type: string
          example: SecretList
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/SecretsResponse'
    ObjectReference:
      type: object
      properties:
        kind:
          type: string
          description: ""
        name:
          type: string
          description: ""
        origin:
          type: string
          description: ""
        uid:
          type: string
          description: ""
        api_version:
          type: string
          description: ""
        resource_version:
          type: string
          description: ""
        field_path:
          type: string
          description: ""
    ServiceAccounts:
      type: object
      properties:
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/ObjectReference'
          example:
            - kind: ""
              name: ""
              origin: ""
              uid: ""
              api_version: ""
              resource_version: ""
              field_path:  ""
        metadata:
          type: object
          properties:
            origin:
              type: string
              example: "rioos_system"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "assemblyfactory-controller"
            account:
              type: string
              description: "account  defines the id the user account"
              example: ""
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
              properties:
                rioos.io/serviceaccount:
                  type: string
                  example: "job"
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - name: ""
                  kind: ""
                  api_version: ""
                  uid: ""
                  block_owner_deletion: false
    ServiceAccountsResponse:
      type: object
      properties:
        id:
          type: string
          example: "890876542345677654"
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/ObjectReference'
          example:
            - kind: ""
              name: ""
              origin: ""
              uid: ""
              api_version: ""
              resource_version: ""
              field_path:  ""
        metadata:
          type: object
          properties:
            origin:
              type: string
              example: "rioos_system"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "assemblyfactory-controller"
            account:
              type: string
              description: "account  defines the id the user account"
              example: ""
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
              properties:
                rioos.io/serviceaccount:
                  type: string
                  example: "job"
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - name: ""
                  kind: ""
                  api_version: ""
                  uid: ""
                  block_owner_deletion: false
        type_meta:
          type: object
          properties:
            kind:
              type: string
              example: ServiceAccount
            api_version:
              type: string
              example: v1
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    SecretUpdateServiceAccountsResponse:
      type: object
      properties:
        id:
          type: string
          example: "890876542345677654"
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/ObjectReference'
          example:
            - kind: "Secret"
              name: "ca"
              origin: "rioos_system"
              uid: "890765432345678010"
              api_version: "v1"
              resource_version: ""
              field_path:  ""
        metadata:
          type: object
          properties:
            origin:
              type: string
              example: "rioos_system"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "assemblyfactory-controller"
            account:
              type: string
              description: "account  defines the id the user account"
              example: ""
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
              properties:
                rioos.io/serviceaccount:
                  type: string
                  example: "job"
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - name: ""
                  kind: ""
                  api_version: ""
                  uid: ""
                  block_owner_deletion: false
        type_meta:
          type: object
          properties:
            kind:
              type: string
              example: ServiceAccount
            api_version:
              type: string
              example: v1
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    SecretUpdate:
      type: object
      properties:
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/ObjectReference'
          example:
            - kind: "Secret"
              name: "ca"
              origin: "rioos_system"
              uid: "890765432345678010"
              api_version: "v1"
              resource_version: ""
              field_path:  ""
        metadata:
          type: object
          properties:
            origin:
              type: string
              example: "rioos_system"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "assemblyfactory-controller"
            account:
              type: string
              description: "account  defines the id the user account"
              example: ""
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
              properties:
                rioos.io/serviceaccount:
                  type: string
                  example: "job"
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - name: ""
                  kind: ""
                  api_version: ""
                  uid: ""
                  block_owner_deletion: false
    ServiceAccountsList:
      type: object
      properties:
        kind:
          type: string
          example: ServiceAccountList
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/SecretUpdateServiceAccountsResponse'
    Datacenters:
      type: object
      required:
        - nodes
        - networks
        - storage
      properties:
        nodes:
          type: array
          description: "list of nodes to the region"
          items:
            type: string
            example: "918760340378886144"
        storage:
          type: string
          description: "which storage type to support the datacenter creation"
          example: "876534567809876543"
        networks:
          type: array
          description: "list of networks ,which network to support the datacenter"
          items:
            type: string
            example: "876542345676542345"
        enabled:
          type: boolean
          description: "used to disable the datacenter when time of may be node ar network failure"
          example: true
        flag:
          type: string
          description: "describe the which place that datacenter located, provide that country flag Example:india.png"
          example: "ch.png"
        currency:
          type: string
          description: "type of the currency that country support"
          example: "rs"
        advanced_settings:
          type: object
          description: "add some additional features for the datacenter"
          properties:
            country:
              type: string
              example: "India"
        status:
          type: object
          description: "Most recently observed status of the service. Populated by the system. Read-only.  Initially during submission, the status is pending"
          required:
            - phase
          properties:
            phase:
              type: string
              example: "ready"
        object_meta:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "chennai"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
    DatacenterResponse:
      type: object
      properties:
        id:
          type: string
          example: "876543212345679456"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: Datacenter
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "chennai"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: "orphan"
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
              example: []
        nodes:
          type: array
          description: "list of nodes to the region"
          items:
            type: string
            example: "918760340378886144"
        storage:
          type: string
          description: "which storage type to support the datacenter creation"
          example: "876534567809876543"
        networks:
          type: array
          description: "list of networks ,which network to support the datacenter"
          items:
            type: string
            example: "876542345676542345"
        enabled:
          type: boolean
          description: "used to disable the datacenter when time of may be node ar network failure"
          example: true
        advanced_settings:
          description: "add some additional features for the datacenter"
          type: object
          properties:
            country:
              type: string
              example: "India"
        flag:
          type: string
          description: "describe the which place that datacenter located, provide that country flag Example:india.png"
          example: "ch.png"
        currency:
          type: string
          description: "type of the currency that country support"
          example: "rs"
        status:
          type: object
          description: "Status is a return value for calls that don't return other objects."
          properties:
            phase:
              type: string
              example: "ready"
            message:
              type: string
              description: "A human-readable description of the status of this operation."
              example: ""
            reason:
              type: string
              description: "A machine-readable description of why this operation is in the Failure status."
              example: ""
            conditions:
              type: array
              items:
                type: object
              example: []
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    DatacenterList:
      type: object
      properties:
        kind:
          type: string
          example: DatacenterList
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/DatacenterResponse'
    Authenticate:
      type: object
      properties:
        email:
          type: object
          example: "info"
        password:
          type: object
          example: "vino123"
    LdapConfig:
      type: object
      properties:
        host:
          type: string
          example: "ldap://ldap.example.com"
        port:
          type: string
          example: "ldap port : eg: 636 as integer"
        enforce_starttls:
          type: boolean
          example: true
        use_ldaps:
          type: boolean
          example: true
        lookup_dn:
          type: string
          example: "cn=admin,dc=megam,dc=org"
        lookup_password:
          type: string
          example: "chennai28v"
        user_search:
          type: object
          properties:
            search_base:
              type: string
              example: "dc=megam,dc=org"
            search_filter_template:
              type: string
              example: "cn={username}"
        group_search:
          type: object
          properties:
            search_base:
              type: string
              example: ""
            search_filter_template:
              type: string
              example: ""
            member_attributes:
              type: array
              items:
                type: string
                example: "string"
        ca_certs:
          type: string
          example: "if the client needs to access LDAP  using TLS please add it the root chaing Certificate authority(CA) certificate"
        client_cert:
          type: string
          example: "if the client needs to access LDAP  using TLS then add the certificate"
    LdapConfigResponse:
      type: object
      properties:
        host:
          type: string
          example: "ldap://ldap.example.com"
        port:
          type: string
          example: "ldap port : eg: 636 as integer"
        enforce_starttls:
          type: boolean
          example: true
        use_ldaps:
          type: boolean
          example: true
        lookup_dn:
          type: string
          example: "cn=admin,dc=megam,dc=org"
        lookup_password:
          type: string
          example: "chennai28v"
        user_search:
          type: object
          properties:
            search_base:
              type: string
              example: "dc=megam,dc=org"
            search_filter_template:
              type: string
              example: "cn={username}"
        group_search:
          type: object
          properties:
            search_base:
              type: string
              example: ""
            search_filter_template:
              type: string
              example: ""
            member_attributes:
              type: array
              items:
                type: string
                example: "string"
        ca_certs:
          type: string
          example: "if the client needs to access LDAP  using TLS please add it the root chaing Certificate authority(CA) certificate"
        client_cert:
          type: string
          example: "if the client needs to access LDAP  using TLS then add the certificate"

    Roles:
      type: object
      properties:
        name:
          type: string
          example: "ubunturole/rios:superuser"
        description:
          type: string
          example: "uperuser of RIO/OS. God given powers. instance"
    RolesResponse:
      type: object
      properties:
        id:
          type: string
          example: "89075234567834567"
        name:
          type: string
          example: "ubunturole/rios:superuser"
        description:
          type: string
          example: "uperuser of RIO/OS. God given powers. instance"
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    RolesList:
      type: object
      properties:
        kind:
          type: string
          example: RolesList
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/RolesResponse'

    Permissions:
      type: object
      properties:
        role_id:
          type: string
          example: "815697391196839936"
        name:
          type: string
          example: "rioos.assembly.get"
        description:
          type: string
          example: "Read only access to all the users  VMs, Containers"
    PermissionsResponse:
      type: object
      properties:
        id:
          type: string
          example: "8765432123456543"
        role_id:
          type: string
          example: "815697391196839936"
        name:
          type: string
          example: "rioos.assembly.get"
        description:
          type: string
          example: "Read only access to all the users  VMs, Containers"
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    PermissionsList:
      type: object
      properties:
        kind:
          type: string
          example: Permissionsist
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/PermissionsResponse'

    Addresses:
      type: object
      properties:
        name:
          type: string
          example: "private"
        ip:
          type: string
          example: "192.168.1.11"
        protocol_version:
          type: string
          example: "ipv4"
    HealthResponse:
      type: object
      properties:
        kind:
          type: string
          example: "ReportsStatistics"
        api_version:
          type: string
          example: "v1"
        id:
          type: string
          example: "ReportsStatistics"
        results:
          type: object
          properties:
            title:
              type: string
              example: "Command center operations"
            guages:
              type: object
              properties:
                title:
                  type: string
                  example: "Cumulative operations counter"
                counters:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: cpu_total
                      description:
                        type: string
                        example: ""
                      cpu:
                        type: string
                        example: ""
                      counter:
                        type: string
                        example: "13.434637664697133"

            statistics:
              type: object
              properties:
                title:
                  type: string
                  example: "Statistics"
                nodes:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "first_riocorp_io"
                      kind:
                        type: string
                        example: "Node"
                      api_version:
                        type: string
                        example: "v1"
                      name:
                        type: string
                        example: "first.riocorp.io"
                      description:
                        type: string
                        example: ""
                      cpu:
                        type: string
                        example: ""
                      counter:
                        type: string
                        example: "10.304252570041308"
                      cost_of_consumption:
                        type: string
                        example: ""
                      health:
                        type: string
                        example: ""

            osusages:
              type: object
              properties:
                title:
                  type: string
                  example: ""
                from_date:
                  type: string
                  example: ""
                to_date:
                  type: string
                  example: ""
                cumulative:
                  type: object
                  properties:
                    cpu:
                      type: string
                      example: ""
                    counter:
                      type: string
                      example: ""
                    alert:
                      type: string
                      example: ""
                item:
                  type: array
                  items:
                    type: string
    AuthenticateResponse:
      type: object
      properties:
        id:
          type: string
          example: "87654321345678909"
        email:
          type: string
          example: ""
        name:
          type: string
          example: "megam"
        token:
          type: string
          example: "vzNMyoHedJHk5"
        api_key:
          type: string
          example: "1234567890"
        flags:
          type: integer
          example: 0


    Jobs:
      type: object
      properties:
        object_meta:
          type: object
          required:
            - name
            - account
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "scaledown"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "8765234567845678"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              required:
                - uid
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: "Assembly"
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: "v1"
                  name:
                    type: string
                    description: "Name of the referent."
                    example: "lev.megam.io"
                  uid:
                    type: string
                    description: "UID of the referent. owner_refered by <assembly_id> (or) <backup_id> (or) <service_id>"
                    example: "8765678876543212"
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        status:
          $ref: '#/components/schemas/Status'
        spec:
          type: object
          required:
            - node_id
          properties:
            node_id:
              type: string
              description: "applicable node for this job. this job will be scheduler allocate in the specific node id. incase node id is invalid no one can receive this job."
              example: "8765432345678765432345"
            group:
              type: string
              description: "group represents a grouping of jobs that applies to. The supported groupings are assembly, service, backup,snapshot"
              example: "assembly"
            action:
              type: string
              description: "action represents the requested action to be performed by the job"
              example: "verticalScaleDown"
    JobsResponse:
      type: object
      properties:
        id:
          type: string
          example: "897654567765456"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: "Job"
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: "v1"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "lev.megam.io"
            account:
              type: string
              description: "account  defines the id the user account"
              example: ""
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: "#/components/schemas/Initializers"
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: "Assembly"
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: "v1"
                  name:
                    type: string
                    description: "Name of the referent."
                    example: "lev.megam.io"
                  uid:
                    type: string
                    description: "UID of the referent. owner_refered by <assembly_id> (or) <backup_id> (or) <service_id>"
                    example: "8765678876543212"
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        status:
          $ref: '#/components/schemas/Status'
        spec:
          type: object
          properties:
            node_id:
              type: string
              description: "applicable node for this job. this job will be scheduler allocate in the specific node id. incase node id is invalid no one can receive this job."
              example: "8765432345678765432345"
            group:
              type: string
              description: "group represents a grouping of jobs that applies to. The supported groupings are assembly, service, backup,snapshot"
              example: "assembly"
            action:
              type: string
              description: "action represents the requested action to be performed by the job"
              example: "verticalScaleDown"
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    JobsList:
      type: object
      properties:
        kind:
          type: string
          description: "kind is a string value representing the REST resource this object represents."
          example: JobList
        api_version:
          type: string
          description: "api version defines the versioned schema of this representation of an object"
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/JobsResponse'
    Plan:
      type: object
      required:
        - category
        - version
      properties:
        object_meta:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "debian"
        category:
          type: string
          description: "category represents a plans  relationship to Rio/OS. Valid relationships are  machine, container, application and blockchain."
          example: "machine"
        version:
          type: string
          description: "version represents the version of this plan software."
          example: "9"
        icon:
          type: string
          description: " an identifier to represent this plan pictorially"
          example: "debian.png"
        description:
          type: string
          description: "plan description"
          example: "Debian operating system is the set of basic programs and utilities that make your computer run. At the core of an operating system is the kernel"
        characteristics:
          type: object
          description: "characteristics The  additional metadata of the plan.  example `extension: iso`, This says this plan is available as an iso."
          properties:
            extension:
              type: string
              example: "img"
        ports:
          type: array
          description: "The default port numbers available for this plan. example, wordpress app is available in port 80"
          items:
            type: object
        envs:
          type: object
          description: "The required, editable environment variables for a plan."
        lifecycle:
          type: object
          description: "describes actions that the management system should take in response to lifecycle events."
        status:
          type: object
          required:
            - phase
          properties:
            phase:
              type: string
              example: "ready"
    BlockchainPlan:
      type: object
      required:
        - category
        - version
      properties:
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rioos/node"
            owner_references:
              required:
              - uid
              type: array
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - kind: "Package"
                  api_version: "v1"
                  name: "node"
                  uid: "926620393328877568"
                  block_owner_deletion: false
        category:
          type: string
          description: "category represents a plans  relationship to Rio/OS. Valid relationships are  machine, container, application and blockchain."
          example: "blockchain_template"
        version:
          type: string
          description: "version represents the version of this plan software."
          example: "9.8.0 "
        icon:
          type: string
          description: " an identifier to represent this plan pictorially"
          example: "blockchain.png"
        description:
          type: string
          description: "plan description"
          example: "Blockchain is the world's leading software platform for digital assets. Offering the largest production block chain platform in the world."
        characteristics:
          type: object
          description: "characteristics The  additional metadata of the plan.  example `extension: iso`, This says this plan is available as an iso."
          properties:
            extension:
              type: string
              example: "img"
        ports:
          type: array
          description: "The default port numbers available for this plan. example, wordpress app is available in port 80"
          items:
            type: object
            properties:
              container_port:
                type: string
                example: "3000"
              host_ip:
                type: string
                example: ""
              host_port:
                  type: string
                  example: ""
              protocol:
                type: string
                example: "TCP/UDP"
        envs:
          type: object
          description: "The required, editable environment variables for a plan."
          properties:
            NODE_ENV:
              type: object
              properties:
                required:
                  type: string
                  example: "true"
                value:
                  type: string
                  example: "production"
                editable:
                  type: string
                  example: "true"
            NODE_HOME:
              type: object
              properties:
                required:
                  type: string
                  example: "false"
                value:
                  type: string
                  example: "/usr/lib/node"
                editable:
                  type: string
                  example: "true"
        lifecycle:
          type: object
          description: "describes actions that the management system should take in response to lifecycle events."
          properties:
            postStart:
              type: object
              properties:
                exec:
                  type: object
                  properties:
                    command:
                      type: array
                      items:
                        type: string
                        example: "/bin/sh ,-c, echo Hello from the postStart handler > /usr/share/message"
            preStop:
              type: object
              properties:
                exec:
                  type: object
                  properties:
                    command:
                      type: array
                      items:
                        type: string
                        example: "node"
        status:
          type: object
          properties:
            phase:
              type: string
              example: "ready"
            message:
              type: string
              description: "A human-readable description of the status of this operation."
              example: ""
            reason:
              type: string
              description: "A machine-readable description of why this operation is in the Failure status."
              example: ""
            conditions:
              type: array
    BlockchainPlanResponse:
      type: object
      properties:
        id:
          type: string
          example: "9876543245678456"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: "Plan"
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: "v1"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rioos/node"
            owner_references:
              required:
              - uid
              type: array
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - kind: "Package"
                  api_version: "v1"
                  name: "node"
                  uid: "926620393328877568"
                  block_owner_deletion: false
        category:
          type: string
          description: "category represents a plans  relationship to Rio/OS. Valid relationships are  machine, container, application and blockchain."
          example: "blockchain_template"
        version:
          type: string
          description: "version represents the version of this plan software."
          example: "9.8.0 "
        icon:
          type: string
          description: " an identifier to represent this plan pictorially"
          example: "blockchain.png"
        description:
          type: string
          description: "plan description"
          example: "Blockchain is the world's leading software platform for digital assets. Offering the largest production block chain platform in the world."
        characteristics:
          type: object
          description: "characteristics The  additional metadata of the plan.  example `extension: iso`, This says this plan is available as an iso."
          properties:
            extension:
              type: string
              example: "img"
        ports:
          type: array
          description: "The default port numbers available for this plan. example, wordpress app is available in port 80"
          items:
            type: object
            properties:
              container_port:
                type: string
                example: "3000"
              host_ip:
                type: string
                example: ""
              host_port:
                  type: string
                  example: ""
              protocol:
                type: string
                example: "TCP/UDP"
        envs:
          type: object
          description: "The required, editable environment variables for a plan."
          properties:
            NODE_ENV:
              type: object
              properties:
                required:
                  type: string
                  example: "true"
                value:
                  type: string
                  example: "production"
                editable:
                  type: string
                  example: "true"
            NODE_HOME:
              type: object
              properties:
                required:
                  type: string
                  example: "false"
                value:
                  type: string
                  example: "/usr/lib/node"
                editable:
                  type: string
                  example: "true"
        lifecycle:
          type: object
          description: "describes actions that the management system should take in response to lifecycle events."
          properties:
            postStart:
              type: object
              properties:
                exec:
                  type: object
                  properties:
                    command:
                      type: array
                      items:
                        type: string
                        example: "/bin/sh ,-c, echo Hello from the postStart handler > /usr/share/message"
            preStop:
              type: object
              properties:
                exec:
                  type: object
                  properties:
                    command:
                      type: array
                      items:
                        type: string
                        example: "node"
        status:
          type: object
          properties:
            phase:
              type: string
              example: "ready"
            message:
              type: string
              description: "A human-readable description of the status of this operation."
              example: ""
            reason:
              type: string
              description: "A machine-readable description of why this operation is in the Failure status."
              example: ""
            conditions:
              type: array
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    NginxPlan:
      type: object
      required:
        - category
        - version
      properties:
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "nginx"
        category:
          type: string
          description: "category represents a plans  relationship to Rio/OS. Valid relationships are  machine, container, application and blockchain."
          example: "container"
        version:
          type: string
          description: "version represents the version of this plan software."
          example: "1.13"
        icon:
          type: string
          description: " an identifier to represent this plan pictorially"
          example: "nginx.png"
        description:
          type: string
          description: "plan description"
          example: "software for web serving, reverse proxying, caching, load balancing, media streaming, and more"
        characteristics:
          type: object
          description: "characteristics The  additional metadata of the plan.  example `extension: iso`, This says this plan is available as an iso."
          properties:
            image_pullpolicy:
              type: string
              example: "always"
        ports:
          type: array
          description: "The default port numbers available for this plan. example, wordpress app is available in port 80"
          items:
            type: object
        envs:
          type: object
          description: "The required, editable environment variables for a plan."
        lifecycle:
          type: object
          description: "describes actions that the management system should take in response to lifecycle events."
        status:
          type: object
          properties:
            phase:
              type: string
              example: ready
    NginxPlanResponse:
      type: object
      properties:
        id:
          type: string
          description: "id an unique identifier in systems of record. Generated during creation of the plan"
          example: "987654321234321234"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: "Plan"
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: "v1"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "nginx"
            account:
              type: string
              description: "account  defines the id the user account"
              example: ""
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
        category:
          type: string
          description: "category represents a plans  relationship to Rio/OS. Valid relationships are  machine, container, application and blockchain."
          example: "container"
        version:
          type: string
          description: "version represents the version of this plan software."
          example: "1.13"
        icon:
          type: string
          description: " an identifier to represent this plan pictorially"
          example: "nginx.png"
        description:
          type: string
          description: "plan description"
          example: "software for web serving, reverse proxying, caching, load balancing, media streaming, and more"
        characteristics:
          type: object
          description: "characteristics The  additional metadata of the plan.  example `extension: iso`, This says this plan is available as an iso."
          properties:
            image_pullpolicy:
              type: string
              example: "always"
        ports:
          type: array
          description: "The default port numbers available for this plan. example, wordpress app is available in port 80"
          items:
            type: object
        envs:
          type: object
          description: "The required, editable environment variables for a plan."
        lifecycle:
          type: object
          description: "describes actions that the management system should take in response to lifecycle events."
        status:
          type: object
          properties:
            phase:
              type: string
              example: ready
            message:
              type: string
              description: "A human-readable description of the status of this operation."
              example: ""
            reason:
              type: string
              description: "A machine-readable description of why this operation is in the Failure status."
              example: ""
            conditions:
              type: array
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    PlanResponse:
      type: object
      properties:
        id:
          type: string
          description: "id an unique identifier in systems of record. Generated during creation of the plan"
          example: "870109412813971451"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: "Plan"
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: "v1"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "debian"
        category:
          type: string
          description: "category represents a plans  relationship to Rio/OS. Valid relationships are  machine, container, application and blockchain."
          example: "machine"
        version:
          type: string
          description: "version represents the version of this plan software."
          example: "9"
        icon:
          type: string
          description: " an identifier to represent this plan pictorially"
          example: "debian.png"
        description:
          type: string
          description: "plan description"
          example: "Debian operating system is the set of basic programs and utilities that make your computer run. At the core of an operating system is the kernel"
        characteristics:
          type: object
          description: "characteristics The  additional metadata of the plan.  example `extension: iso`, This says this plan is available as an iso."
          properties:
            extension:
              type: string
              example: "img"
        ports:
          type: array
          description: "The default port numbers available for this plan. example, wordpress app is available in port 80"
          items:
            type: object
        envs:
          type: object
          description: "The required, editable environment variables for a plan."
        lifecycle:
          type: object
          description: "describes actions that the management system should take in response to lifecycle events."
        status:
          type: object
          properties:
            phase:
              type: string
              example: "ready"
            message:
              type: string
              description: "A human-readable description of the status of this operation."
              example: ""
            reason:
              type: string
              description: "A machine-readable description of why this operation is in the Failure status."
              example: ""
            conditions:
              type: array
              items:
                type: object
              example: []
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    PlanList:
      type: object
      properties:
        kind:
          type: string
          description: "kind is a string value representing the REST resource this object represents."
          example: PlanList
        api_version:
          type: string
          description: "api version defines the versioned schema of this representation of an object"
          example: v1
        items:
          type: array
          items:
            $ref: '#/components/schemas/PlanResponse'
    HSstatus:
      type: object
      properties:
        last_scale_time:
          type: string
          description: "`last_scale_time` is the last time the HorizontalScaler scaled the number of assemblys,  used by the horizontalscaler to control how often the number of assemblys is changed."
          example: "2018-03-20T19:09:10+05:30"
        current_replicas:
          type: integer
          description: "`current_replicas` is current number of replicas of assemblys managed by this horizontalscaler, as last seen by the horizontalscaler."
          example: 1
        desired_replicas:
          type: integer
          description: "`desired_replicas` is the desired number of replicas of assemblys managed by this horizontalscaler, as last calculated by the horizontalscaler."
          example: 2
    VerticalScaling:
      type: object
      required:
        - name
        - account
        - state
        - scale_type
        - uid
      properties:
        scale_type:
          type: string
          description: "There are two types of  vertical scaler. “MANUALVS”, “AUTOVS”"
          example: AUTOVS
        state:
          type: string
          description: "The state represents when controller apply the scaling rule on assemblies."
          example: "ABLETOSCALE"
        metadata:
          type: object
          description: "Standard object's metadata. Can contain optional label selector team, origin"
        spec:
          type: object
          properties:
            scale_up_wait_time:
              type: integer
              description: " wait minutes for the after last scale action for scale up"
              example: 5
            scale_down_wait_time:
              type: integer
              description: " wait minutes for the after last scale action for scale down"
              example: 5
            min_resource:
              type: object
              description: "Min_resource is the lower limit for the number of resource to which the vertical scaler can scale down"
              properties:
                cpu:
                  type: string
                  example: "2"
                memory:
                  type: string
                  example: "200 GiB"
            max_resource:
              type: object
              description: "Max resource is the upper limit for the number of resource to which the verticalscaler can scale up."
              properties:
                cpu:
                  type: string
                  example: "4"
                memory:
                  type: string
                  example: "500 GiB"
            metrics:
              type: array
              items:
                type: object
                properties:
                  metric_type:
                    type: string
                    description: "`Type` is the type of metric source.  It should be one of Object,  Resource, each mapping to a matching field in the object."
                    example: "Resource"
                  resource:
                    type: object
                    required:
                      - min_target_value
                      - max_target_value
                    description: "`Resource` refers to a resource metric (such as those specified in requests and limits) known to rioos describing each assembly in the current scale target (e.g. CPU or memory).Such metrics are built in to Rioos, and have special scaling options on top of those available to normal per-assembly metrics using the 'AssemblyFactory' source."
                    properties:
                      name:
                        type: string
                        description: "`Name` is the name of the metric in question."
                        example: "memory"
                      min_target_value:
                        type: string
                        description: "`MinTargetValue` is percentage of the resource to scale down."
                        example: "20"
                      max_target_value:
                        type: string
                        description: "`MaxTargetValue` is the percentage of the resource to scale up."
                        example: "80"
                      metric_time_spec:
                        type: object
                        description: "`scale_up_by` `scale_up_wait_time`, ..down..: Control the rate of scaling in two ways, both for scaling up and for scaling down. We can define how many instances are added or removed, and set a delay."
                        properties:
                          scale_up_by:
                            type: string
                            example: "1"
                          scale_down_by:
                            type: string
                            example: "1"
        status:
          type: object
          properties:
            last_scale_time:
              type: string
              description: "`last_scale_time` is the last time the HorizontalScaler scaled the number of assemblys,  used by the horizontalscaler to control how often the number of assemblys is changed."
            current_resource:
              type: object
              description: "`current_resources` is current resource average of the metrics for the assemblyfactory managed by this verticalscaler, as last seen by the verticalscaler."
              properties:
                cpu:
                  type: string
                  example: "4"
                memory:
                  type: string
                  example: "200 GiB"
            desired_resource:
              type: object
              description: "`desired_resources` is desired resource average of the metrics for the assemblyfactory managed by this verticalscaler, as last seen by the verticalscaler."
              properties:
                cpu:
                  type: string
                  example: "5"
                memory:
                  type: string
                  example: " 500 GiB"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "vscale"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: "AssemblyFactory"
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: "v1"
                  name:
                    type: string
                    description: "Name of the referent."
                    example: "rough-bush-8634.svc.local"
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: "89878987654432342"
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: true
        update_policy:
          type: object
          properties:
            mode:
              type: string
              example: "auto"
    VerticalScalingResponse:
      type: object
      properties:
        id:
          type: string
          example: "8765456787654567"
        scale_type:
          type: string
          description: "There are two types of  vertical scaler. “MANUALVS”, “AUTOVS”"
          example: AUTOVS
        update_policy:
          type: object
          properties:
            mode:
              type: string
              example: "auto"
        state:
          type: string
          description: "The state represents when controller apply the scaling rule on assemblies."
        spec:
          type: object
          properties:
            scale_up_wait_time:
              type: integer
              description: " wait minutes for the after last scale action for scale up"
              example: 5
            scale_down_wait_time:
              type: integer
              description: " wait minutes for the after last scale action for scale down"
              example: 5
            min_resource:
              type: object
              description: "Min_resource is the lower limit for the number of resource to which the vertical scaler can scale down"
              properties:
                cpu:
                  type: string
                  example: "2"
                memory:
                  type: string
                  example: "200 GiB"
            max_resource:
              type: object
              description: "Max resource is the upper limit for the number of resource to which the verticalscaler can scale up."
              properties:
                cpu:
                  type: string
                  example: "4"
                memory:
                  type: string
                  example: "500 GiB"
            metrics:
              type: array
              items:
                type: object
                properties:
                  metric_type:
                    type: string
                    description: "`Type` is the type of metric source.  It should be one of Object,  Resource, each mapping to a matching field in the object."
                    example: "Resource"
                  resource:
                    type: object
                    description: "`Resource` refers to a resource metric (such as those specified in requests and limits) known to rioos describing each assembly in the current scale target (e.g. CPU or memory).Such metrics are built in to Rioos, and have special scaling options on top of those available to normal per-assembly metrics using the 'AssemblyFactory' source."
                    properties:
                      name:
                        type: string
                        description: "`Name` is the name of the metric in question."
                        example: "memory"
                      min_target_value:
                        type: string
                        description: "`MinTargetValue` is percentage of the resource to scale down."
                        example: "20"
                      max_target_value:
                        type: string
                        description: "`MaxTargetValue` is the percentage of the resource to scale up."
                        example: "80"
                      metric_time_spec:
                        type: object
                        description: "`scale_up_by` `scale_up_wait_time`, ..down..: Control the rate of scaling in two ways, both for scaling up and for scaling down. We can define how many instances are added or removed, and set a delay."
                        properties:
                          scale_up_by:
                            type: string
                            example: "1"
                          scale_down_by:
                            type: string
                            example: "1"
        status:
          type: object
          properties:
            last_scale_time:
              type: string
              description: "`last_scale_time` is the last time the HorizontalScaler scaled the number of assemblys,  used by the horizontalscaler to control how often the number of assemblys is changed."
            current_resource:
              type: object
              description: "`current_resources` is current resource average of the metrics for the assemblyfactory managed by this verticalscaler, as last seen by the verticalscaler."
              properties:
                cpu:
                  type: string
                  example: "4"
                memory:
                  type: string
                  example: "200 GiB"
            desired_resource:
              type: object
              description: "`desired_resources` is desired resource average of the metrics for the assemblyfactory managed by this verticalscaler, as last seen by the verticalscaler."
              properties:
                cpu:
                  type: string
                  example: "5"
                memory:
                  type: string
                  example: " 500 GiB"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "vscale"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: "AssemblyFactory"
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: "v1"
                  name:
                    type: string
                    description: "Name of the referent."
                    example: "rough-bush-8634.svc.local"
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: "89878987654432342"
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: true
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: VerticalScaling
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    VerticalStatus:
      type: object
      properties:
        current_resource:
          type: object
          description: "average of the metrics for the assemblyfactory managed by this verticalscaler, as last seen by the verticalscaler."
          properties:
            cpu:
              type: string
              example: "4"
            memory:
              type: string
              example: "200 GiB"
        desired_resource:
          type: object
          description: "`desired_resources` is desired resource average of the metrics for the assemblyfactory managed by this verticalscaler, as last seen by the verticalscaler."
          properties:
            cpu:
              type: string
              example: "5"
            memory:
              type: string
              example: " 500 GiB"
        last_scale_time:
          type: string
          description: "last upadet scale time of the vertical scaling"
          example: ""
    VerticalScalingList:
      type: object
      properties:
        kind:
          type: string
          description: "kind is a string value representing the REST resource this object represents."
          example: "VerticalScalingList"
        api_version:
          type: string
          description: "api version defines the versioned schema of this representation of an object"
          example: "v1"
        items:
          type: array
          items:
            $ref: '#/components/schemas/VerticalScalingResponse'
    Volumes:
      type: object
      required:
        - account
        - mount_path
        - allocated
      properties:
        mount_path:
          type: string
          description: "the mount path/pool name of the block device"
          example: "/var/lib"
        allocated:
          type: string
          description: "the size of the storage allocated."
          example: "50 GiB"
        status:
          $ref: '#/components/schemas/ReadyStatus'
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "vol1"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: "dc_#1"
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              required:
              - uid
              type: array
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - kind: "Assembly"
                  api_version: "v1"
                  name: "lev.megam.io"
                  uid: "891176347156619264"
                  block_owner_deletion: true
                  meta_data: {"sample":"sample"}
                - kind: "StoragePool"
                  api_version: "v1"
                  name: "sto1"
                  uid: "8730013368100188800"
                  block_owner_deletion: true
    OwnerReference:
      type: object
      required:
        - kind
        - uid
      properties:
        kind:
          type: string
          description: "kind is a string value representing the REST resource this object represents."
        api_version:
          type: string
          description: "api version defines the versioned schema of this representation of an object"
        name:
          type: string
          description: "name of the referent"
        uid:
          type: string
          description: "id of the referent"
        block_owner_deletion:
          type: boolean
    VolumesResponse:
      type: object
      properties:
        id:
          type: string
          example: "8765456789875678"
        mount_path:
          type: string
          description: "the mount path/pool name of the block device"
          example: "/var/lib"
        allocated:
          type: string
          description: "the size of the storage allocated."
          example: "50 GiB"
        status:
          $ref: '#/components/schemas/ReadyStatus'
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "vol1"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: "chennai"
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - kind: "Assembly"
                  api_version: "v1"
                  name: "lev.megam.io"
                  uid: "891176347156619264"
                  block_owner_deletion: true
                - kind: "StoragePool"
                  api_version: "v1"
                  name: "sto1"
                  uid: "8730013368100188800"
                  block_owner_deletion: true
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: Volumes
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    VolumesList:
      type: object
      properties:
        kind:
          type: string
          description: "kind is a string value representing the REST resource this object represents."
          example: "VolumeList"
        api_version:
          type: string
          description: "api version defines the versioned schema of this representation of an object"
          example: "v1"
        items:
          type: array
          items:
            $ref: '#/components/schemas/VolumesResponse'
    SettingsMap:
      type: object
      required:
        - name
        - origin
      properties:
        metadata:
          type: object
          description: "describe the origin name of the settings map"
          properties:
            origin:
              type: string
              example: "rioos_system"
              description: "name of the origin namespace"
        data:
          type: object
          description: "describe the security information"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "cluster_info"
            account:
              type: string
              description: "account  defines the id the user account"
              example: ""
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
    SettingsMapResponse:
      type: object
      properties:
        id:
          type: string
          example: "876445678765678"
        metadata:
          type: object
          description: "describe the origin name of the settings map"
          properties:
            origin:
              type: string
              example: "rioos_system"
              description: "name of the origin namespace"
        data:
          type: object
          description: "describe the security information"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "cluster_info"
            account:
              type: string
              description: "account  defines the id the user account"
              example: ""
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                type: object
                properties:
                  kind:
                    type: string
                    description: "Kind of the referent."
                    example: ""
                  api_version:
                    type: string
                    description: " API version of the referent."
                    example: ""
                  name:
                    type: string
                    description: "Name of the referent."
                    example: ""
                  uid:
                    type: string
                    description: "UID of the referent."
                    example: ""
                  block_owner_deletion:
                    type: boolean
                    description: "If true, AND if the owner has the foregroundDeletion finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
                    example: false
        type_meta:
          type: object
          properties:
            kind:
              type: string
              description: "kind is a string value representing the REST resource this object represents."
              example: SettingsMap
            api_version:
              type: string
              description: "api version defines the versioned schema of this representation of an object"
              example: v1
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    Initializers:
      type: object
      description:  "An initializer is a controller which enforces some system invariant at object creation time."
      properties:
        pending:
          type: array
          description: "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
          items:
            type: object
          example: []
        result:
          type: object
          description: "If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion."
          properties:
            type_meta:
              type: object
              properties:
                kind:
                  type: string
                  example: ""
                api_version:
                  type: string
                  example: ""
            status:
              type: string
              description: " status of the operation. One of: Success or Failure"
              example: ""
            message:
              type: string
              description: "a human-readable description of the status of this operation."
              example: ""
            reason:
              type: string
              description: "a machine-readable description of why this operation is in the Failure status. If this value is empty there is no     information available. a Reason clarifies an HTTP status  code but does not override it."
              example: ""
            details:
              type: object
              description: "atatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response"
              properties:
                name:
                  type: string
                  description: "the name attribute of the resource associated with the status StatusReason"
                  example: ""
                group:
                  type: string
                  description: "the group attribute of the resource associated with the status StatusReason."
                  example: ""
                kind:
                  type: string
                  description: "the kind attribute of the resource associated with the status StatusReason."
                  example: ""
                causes:
                  type: array
                  description: "the Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
                  items:
                    type: object
                  example: []
                uid:
                  type: string
                  description: "UID of the resource."
                  example: ""
                retry_after_seconds:
                  description: "if specified, the time in seconds before the operation should be retried."
                  type: integer
                  example: 0
            code:
              type: integer
              description: "suggested HTTP return code for this status, 0 if not set."
              example: 0



    LogsResponse:
      type: object
      properties:
        kind:
          type: string
          example: LogList
        api_version:
          type: string
          example: v1
        items:
          type: array
          items:
            type: object
            properties:
              time:
                type: string
                example: "2017-12-22T10:13:33.717235731Z"
              log:
                type: string
                example: "2017-10-11 10:47:33.576+0000: starting up libvirt version: 1.3.1, package: 1ubuntu10.14 (Jorge Niedbalski <jorge.niedbalski@canonical.com> Thu, 10 Aug 2017 22:50:46 -0400), qemu version: 2.5.0 (Debian 1:2.5+dfsg-5ubuntu10.16), hostname: rajesh"
    VulnerResponse:
      type: object
      properties:
        image_digest:
          type: string
          description: "The image digest, including algorithm. eg. sha256:427752aa7da803378f765f5a8efba421df5925cbde8ab011717f3642f406fb15"
          example: "sha256:f871d0805ee3ce1c52b0608108dbdf1b447a34d22d5c7278a3a9dd78fc12c663"
        vulnerabilities:
          type: array
          items:
            type: object
            properties:
              fix:
                type: string
                description: "The package containing a fix, if available"
                example: "None"
              package:
                type: string
                description: :"The package name and version that are vulnerable in the image"
                example: "coreutils-8.25-2ubuntu3~16.04"
              severity:
                type: string
                description: "The severity of the vulnerability"
                example: "Low"
              url:
                type: string
                description: "The package name and version that are vulnerable in the image"
                example: "http://people.ubuntu.com/~ubuntu-security/cve/CVE-2016-2781"
              vuln:
                type: string
                description: "The vulnerability identifier"
                example: "CVE-2016-2781"
        vulnerability_type:
          type: string
          description: "type of the vulnerablity"
          example: os
    MetricResponse:
      type: object
      properties:
        849703502417502208:
          type: string
          example: "93.99999779999999"
          description: "value of the assembly metric"
        849703502417500209:
          type: string
          example: "98.99999999999999"
          description: "value of the assembly metric"
    Audit:
      type: object
      properties:
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "rioos.megam.io"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "913681030198599680"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            initializers:
              $ref: '#/components/schemas/Initializers'
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - kind: "Job"
                  api_version: "v1"
                  name: "rioos.megam.io"
                  uid: ""
                  block_owner_deletion: true
        object_reference:
          type: object
          description: "ObjectReference contains enough information to let you inspect or modify the referred object."
          properties:
            kind:
              type: string
              description: "Kind of the referent."
              example: "Job"
            origin:
              type: string
              description: "Origin of the referent."
            name:
              type: string
              description: "Name of the referent."
              example: "rioos.megam.io"
            uid:
              type: string
              description: "UID of the referent."
              example: ""
            api_version:
              type: string
              example: "v1"
              description: "API version of the referent."
            resource_version:
              type: string
              description: "Specific resourceVersion to which this reference is made, if any."
            field_path:
              type: string
              description: "If referring to a piece of an object instead of an entire object, this string  should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]."
        message:
          type: string
          description: "A human-readable description of the status of this operation."
          example: "Assembly worker job receives a job 913652511120875520"
        reason:
          type: string
          description: "his should be a short, machine understandable string that gives the reason for the transition into the object's current status."
          example: "NewJobReceived"
        source:
          type: object
          description: "The component reporting this event. Should be a short machine understandable string."
          properties:
            component:
              type: string
              description: "Component from which the event is generated."
              example: "job-controller"
            host:
              type: string
              example: "192.168.2.5"
              description: "Node name on which the event is generated."
        type_of_event:
          description: "Type of this event (Normal, Warning), new types could be added in the future"
          type: string
          example: "Normal"
    AuditListResponse:
      type: object
      properties:
        account:
          type: string
          example: "976431234567845678"
        address:
          type: string
          example: "192.168.2.5:59510"
        timestamp:
          type: string
          example: "2018-02-12T13:36:47.710549663+00:00"
        event:
          type: object
          properties:
            type_meta:
              type: object
              properties:
                kind:
                  type: string
                  example: "Event"
                api_version:
                  type: string
                  example: "v1"
            object_meta:
              type: object
              properties:
                name:
                  type: string
                  description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
                  example: "rioos.megam.io"
                account:
                  type: string
                  description: "account  defines the id the user account"
                  example: "913681030198599680"
                created_at:
                  type: string
                  description: "created_at is a timestamp representing the server time when this object was created. "
                  example: "2017-12-11T11:29:50.547529+00:00"
                deleted_at:
                  type: string
                  description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
                  example: ""
                deletion_grace_period_seconds:
                  type: integer
                  description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
                  example: 30
                cluster_name:
                  type: string
                  description: "The name of the cluster(datacenter/location) which the object belongs to."
                  example: ""
                labels:
                  type: object
                  description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
                annotations:
                  type: object
                  description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
                initializers:
                  $ref: '#/components/schemas/Initializers'
                finalizers:
                  type: array
                  description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
                  items:
                    type: string
                    example: ""
                owner_references:
                  type: array
                  items:
                    $ref: '#/components/schemas/OwnerReference'
                  example:
                    - kind: "Job"
                      api_version: "v1"
                      name: "rioos.megam.io"
                      uid: ""
                      block_owner_deletion: true
            object_reference:
              type: object
              description: "ObjectReference contains enough information to let you inspect or modify the referred object."
              properties:
                kind:
                  type: string
                  description: "Kind of the referent."
                  example: "Job"
                origin:
                  type: string
                  description: "Origin of the referent."
                name:
                  type: string
                  description: "Name of the referent."
                  example: "rioos.megam.io"
                uid:
                  type: string
                  description: "UID of the referent."
                  example: ""
                api_version:
                  type: string
                  example: "v1"
                  description: "API version of the referent."
                resource_version:
                  type: string
                  description: "Specific resourceVersion to which this reference is made, if any."
                field_path:
                  type: string
                  description: "If referring to a piece of an object instead of an entire object, this string  should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]."
            message:
              type: string
              description: "A human-readable description of the status of this operation."
              example: "Assembly worker job receives a job 913652511120875520"
            reason:
              type: string
              description: "his should be a short, machine understandable string that gives the reason for the transition into the object's current status."
              example: "NewJobReceived"
            source:
              type: object
              description: "The component reporting this event. Should be a short machine understandable string."
              properties:
                component:
                  type: string
                  description: "Component from which the event is generated."
                  example: "job-controller"
                host:
                  type: string
                  description: "Node name on which the event is generated."
                  example: "192.168.2.5"
            type_of_event:
              description: "Type of this event (Normal, Warning), new types could be added in the future"
              type: string
              example: "Normal"
    AuditList:
      type: object
      properties:
        kind:
          type: string
          example: "EventList"
        api_version:
          type: string
          example: "v1"
        items:
          type: array
          items:
            $ref: '#/components/schemas/AuditListResponse'
    BuildConfig:
      type: object
      properties:
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "ruby-sample-build"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              required:
                - uid
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - kind: "AssemblyFactory"
                  api_version: "v1"
                  name: "rough-bush-8634.svc.local"
                  uid: "87543211234567876"
                  block_owner_deletion: true
        meta_data:
          type: object
          properties:
            name:
              type: string
              example: "ruby-sample-build"
        spec:
          type: object
          description: "spec holds all the input necessary to produce a new build, and the conditions when  to trigger them."
          properties:
            run_policy:
              type: string
              description: "runpolicy describes how the new build created from this build  configuration will be scheduled for execution. This is optional, if not specified we default to Serial."
              example: "Serial"
            build_trigger_policys:
              description: "triggers determine how new Builds can be launched from a BuildConfig. If  no triggers are defined, a new build can only occur as a result of an  explicit client build creation."
              type: array
              items:
                type: object
                properties:
                  trigger_type:
                    type: string
                    example: "gittrigger"
                  webhooks:
                    description: "WebHook contains the parameters for a webhook type of trigger"
                    type: array
                    items:
                      type: object
                      properties:
                        hook_type:
                          type: string
                          description: "web hook type"
                          example: "GitHub"
                        secret:
                          type: string
                          description: "secret is the obfuscated webhook secret that triggered a build."
                          example: "secret101"
                  image_change:
                    type: object
                    description: "imagechange contains parameters for an ImageChange type of trigger"
                    properties:
                      last_triggered_image_id:
                        type: string
                        example: "1001"
            source:
              description: "source describes the SCM in use."
              type: object
              properties:
                git:
                  type: object
                  description: "git contains optional information about git build source"
                  properties:
                    uri:
                      type: string
                      description: "uri points to the source that will be built. The structure of the source will depend on the type of build to run"
                      example: "https://github.com/rioadvancement/news-composer-network"
                    reference:
                      type: string
                      description: " ref is the branch/tag/ref to build."
                      example: "master"
                binary:
                  type: object
                  description: "binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy."
                  properties:
                    as_file:
                      type: string
                      description: "asfile indicates that the provided binary input should be considered a single file within the build input."
                      example: ""
                docker_file:
                  type: string
                  description: "dockerfile is the raw contents of a Dockerfile which should be built"
                  example: ""
                images:
                  type: array
                  description: "images describes a set of images to be used to provide source for the build"
                  items:
                    type: object
                    properties:
                      from:
                        type: object
                        description: "from is a reference to an ImageMark, ImageStreamImage, or DockerImage to copy source from."
                        properties:
                          kind:
                            type: string
                            example: ""
                          origin:
                            type: string
                            example: ""
                          name:
                            type: string
                            example: ""
                          uid:
                            type: string
                            example: ""
                          api_version:
                            type: string
                            example: ""
                          resource_version:
                            type: string
                            example: ""
                          field_path:
                            type: string
                            example: ""

                      pull_secret:
                        type: string
                        description: "pull secret is a reference to a secret to be used to pull the image from a registry"
                        example: ""
                      paths:
                        type: array
                        description: "paths is a list of source and destination paths to copy from the image."
                        items:
                          type: object
                          properties:
                            source_path:
                              type: string
                              description: "sourcepath is the absolute path of the file or directory inside the image to copy to the build directory."
                              example: "https:///avaf/vad"
                            destination_dir:
                              type: string
                              description: "destinationdir is the relative directory within the build directory where files copied from the image are placed."
                              example: "/var/lib/"
                source_secret:
                  type: string
                  description: "source secret is the name of a Secret that would be used for setting up the authentication for cloning private repository."
                  example: "876543218765234567"
            strategy:
              type: object
              description: "strategy defines how to perform a build."
              properties:
                source_strategy:
                  type: object
                  description: "source strategy holds the parameters to the Source build strategy."
                  properties:
                    from:
                      type: object
                      description: "from is reference to an DockerImage, ImageStream, ImageMark, or ImageStreamImage from which  the docker image should be pulled"
                      properties:
                        kind:
                          type: string
                          example: "ImageMark"
                        name:
                          type: string
                          example: "ruby-20-centos7:latest"
            output:
              type: object
              description: "output describes the Docker image the Strategy should produce."
              properties:
                to:
                  type: object
                  description: "To defines an optional location to push the output of this build to. Kind must be one of 'ImageMark' or 'DockerImage'."
                  properties:
                    kind:
                      type: string
                      example: "ImageMark"
                    name:
                      type: string
                      example: "node-build-1:136c86c0"
            post_commit:
              type: object
              description: "postcommit is a build hook executed after the build output image is committed, before it is pushed to a registry."
              properties:
                script:
                  type: string
                  description: "script is a shell script to be run with `/bin/sh -ic`. "
                  example: "bundle exec rake test"
            node_selector:
              type: object
              description: "node selector is a selector which must be true for the build pod to fit on a node"
            last_version:
              type: integer
              example: 10
            successful_builds_history_limit:
              type: integer
              example: 10
            failed_builds_history_limit:
              type: integer
              example: 1
    BuildConfigList:
      type: object
      properties:
        kind:
          type: string
          example: "BuildConfigList"
        api_version:
          type: string
          example: "v1"
        items:
          type: array
          items:
            $ref: '#/components/schemas/BuildConfigResponse'
    BuildConfigResponse:
      type: object
      properties:
        id:
          type: string
          description: "unique id of the buildconfig"
          example: "867543210987656789"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              example: "BuildConfig"
            api_version:
              type: string
              example: "v1"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "ruby-sample-build"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              required:
                - uid
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - kind: "AssemblyFactory"
                  api_version: "v1"
                  name: "rough-bush-8634.svc.local"
                  uid: "87543211234567876"
                  block_owner_deletion: true
        meta_data:
          type: object
          properties:
            name:
              type: string
              example: "ruby-sample-build"
        spec:
          type: object
          description: "spec holds all the input necessary to produce a new build, and the conditions when  to trigger them."
          properties:
            run_policy:
              type: string
              description: "runpolicy describes how the new build created from this build  configuration will be scheduled for execution. This is optional, if not specified we default to Serial."
              example: "Serial"
            build_trigger_policys:
              description: "triggers determine how new Builds can be launched from a BuildConfig. If  no triggers are defined, a new build can only occur as a result of an  explicit client build creation."
              type: array
              items:
                type: object
                properties:
                  trigger_type:
                    type: string
                    example: "gittrigger"
                  webhooks:
                    description: "WebHook contains the parameters for a webhook type of trigger"
                    type: array
                    items:
                      type: object
                      properties:
                        hook_type:
                          type: string
                          description: "web hook type"
                          example: "GitHub"
                        secret:
                          type: string
                          description: "secret is the obfuscated webhook secret that triggered a build."
                          example: "secret101"
                  image_change:
                    type: object
                    description: "imagechange contains parameters for an ImageChange type of trigger"
                    properties:
                      last_triggered_image_id:
                        type: string
                        example: "1001"
            source:
              description: "source describes the SCM in use."
              type: object
              properties:
                git:
                  type: object
                  description: "git contains optional information about git build source"
                  properties:
                    uri:
                      type: string
                      description: "uri points to the source that will be built. The structure of the source will depend on the type of build to run"
                      example: "https://github.com/rioadvancement/news-composer-network"
                    reference:
                      type: string
                      description: " ref is the branch/tag/ref to build."
                      example: "master"
                binary:
                  type: object
                  description: "binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy."
                  properties:
                    as_file:
                      type: string
                      description: "asfile indicates that the provided binary input should be considered a single file within the build input."
                      example: ""
                docker_file:
                  type: string
                  description: "dockerfile is the raw contents of a Dockerfile which should be built"
                  example: ""
                images:
                  type: array
                  description: "images describes a set of images to be used to provide source for the build"
                  items:
                    type: object
                    properties:
                      from:
                        type: string
                        description: "from is a reference to an ImageMark, ImageStreamImage, or DockerImage to copy source from."
                        properties:
                          kind:
                            type: string
                            example: ""
                          origin:
                            type: string
                            example: ""
                          name:
                            type: string
                            example: ""
                          uid:
                            type: string
                            example: ""
                          api_version:
                            type: string
                            example: ""
                          resource_version:
                            type: string
                            example: ""
                          field_path:
                            type: string
                            example: ""
                      pull_secret:
                        type: string
                        description: "pull secret is a reference to a secret to be used to pull the image from a registry"
                        example: ""
                      paths:
                        type: array
                        description: "paths is a list of source and destination paths to copy from the image."
                        items:
                          type: object
                          properties:
                            source_path:
                              type: string
                              description: "sourcepath is the absolute path of the file or directory inside the image to copy to the build directory."
                              example: "https:///avaf/vad"
                            destination_dir:
                              type: string
                              description: "destinationdir is the relative directory within the build directory where files copied from the image are placed."
                              example: "/var/lib/"
                source_secret:
                  type: string
                  description: "source secret is the name of a Secret that would be used for setting up the authentication for cloning private repository."
                  example: "876543218765234567"
            strategy:
              type: object
              description: "strategy defines how to perform a build."
              properties:
                source_strategy:
                  type: object
                  description: "source strategy holds the parameters to the Source build strategy."
                  properties:
                    from:
                      type: object
                      description: "from is reference to an DockerImage, ImageStream, ImageMark, or ImageStreamImage from which  the docker image should be pulled"
                      properties:
                        kind:
                          type: string
                          example: "ImageMark"
                        name:
                          type: string
                          example: "ruby-20-centos7:latest"
            output:
              type: object
              description: "output describes the Docker image the Strategy should produce."
              properties:
                to:
                  type: object
                  description: "To defines an optional location to push the output of this build to. Kind must be one of 'ImageMark' or 'DockerImage'."
                  properties:
                    kind:
                      type: string
                      example: "ImageMark"
                    name:
                      type: string
                      example: "node-build-1:136c86c0"
            post_commit:
              type: object
              description: "postcommit is a build hook executed after the build output image is committed, before it is pushed to a registry."
              properties:
                script:
                  type: string
                  description: "script is a shell script to be run with `/bin/sh -ic`. "
                  example: "bundle exec rake test"
            node_selector:
              type: object
              description: "node selector is a selector which must be true for the build pod to fit on a node"
            last_version:
              type: integer
              example: 10
            successful_builds_history_limit:
              type: integer
              example: 10
            failed_builds_history_limit:
              type: integer
              example: 1
        created_at:
          type: string
          example: "2017-09-21T06:51:38.763014+00:00"
    Build:
      type: object
      properties:
        object_meta:
          type: object
          required:
            - account
            - name
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "ruby-build"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - kind: "BuildConfig"
                  api_version: "v1"
                  name: "ruby-sample-build"
                  uid: "867543210987656789"
                  block_owner_deletion: true
        status:
          type: object
          description: "BuildStatus contains the status of a build"
          properties:
            phase:
              type: string
              example: "New"
              description: "phase is the point in the build lifecycle. Possible values are  New, Pending, Running, Complete, failed, Error, and Cancelled."
            cancelled:
              type: boolean
              example: false
              description: "cancelled describes if a cancel event was triggered for the build."
            reason:
              type: string
              example: ""
              description: "reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI."
            message:
              type: string
              example: ""
              description: "message is a human-readable message indicating details about why the build has this status."
            start_timestamp:
              type: string
              example: ""
              description: "starttimestamp is a timestamp representing the server time when this Build started running in a Pod."
            completion_timestamp:
              type: string
              example: ""
              description: "completionTimestamp is a timestamp representing the server time when this Build was finished, whether that build failed or succeeded.  It reflects the time at which the Pod running the Build terminated."
            duration:
              type: string
              example: ""
              description: "duration contains time.Duration object describing build time."
            output_docker_image_reference:
              type: string
              example: ""
              description: "outputDockerImageReference contains a reference to the Docker image that will be built by this build."
            output:
              type: object
              description: "output describes the Docker image the build has produced."
              properties:
                to:
                  type: string
                  example: ""
                  description: "tTo describes the status of the built image being pushed to a registry."
        spec:
          type: object
          description: "spec holds all the input necessary to produce a new build, and the conditions when  to trigger them."
          properties:
            triggerd_by_causes:
              type: array
              description: "triggeredBy describes which triggers started the most recent update to the buildconfig and contains information about those triggers."
              items:
                type: object
                properties:
                  message:
                    type: string
                    example: ""
                    description: "message is used to store a human readable message for why the build was triggered. E.g.: Manually triggered by user, Configuration change,etc."
                  webhook_causes:
                    type: array
                    description: "WebHook represents data for a specified webhook that fired a  specific build."
                    items:
                      type: object
                      properties:
                        hook_type:
                          type: string
                          example: "git"
                          description: "Web hook type"
                        revision:
                          type: object
                          description: "Revision is an optional field that stores the git source revision information of the generic webhook trigger when it is available."
                          properties:
                            git:
                              type: object
                              description: "Git contains information about git-based build source"
                              properties:
                                commit:
                                  type: string
                                  example: "78rftghjvbnm"
                                  description: "Commit is the commit hash identifying a specific commit"
                                message:
                                  type: string
                                  example: "readme update"
                                  description: "Message is the description of a specific commit"
                        secret:
                          type: string
                          description: "Secret is the obfuscated webhook secret that triggered a build."
                          example: "876543212345678909"
                  image_build_cause:
                    type: object
                    description: "ImageChangeBuild stores information about an imagechange event that triggered a new build."
                    properties:
                      image_id:
                        type: string
                        example: ""
                        description: "ImageID is the ID of the image that triggered a a new build."
            source:
              description: "source describes the SCM in use."
              type: object
              properties:
                git:
                  type: object
                  description: "git contains optional information about git build source"
                  properties:
                    uri:
                      type: string
                      description: "uri points to the source that will be built. The structure of the source will depend on the type of build to run"
                      example: "https://github.com/rioadvancement/news-composer-network"
                    reference:
                      type: string
                      description: " ref is the branch/tag/ref to build."
                      example: "master"
                binary:
                  type: object
                  description: "binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy."
                  properties:
                    as_file:
                      type: string
                      description: "asfile indicates that the provided binary input should be considered a single file within the build input."
                      example: ""
                docker_file:
                  type: string
                  description: "dockerfile is the raw contents of a Dockerfile which should be built"
                  example: ""
                images:
                  type: array
                  description: "images describes a set of images to be used to provide source for the build"
                  items:
                    type: object
                    properties:
                      from:
                        type: string
                        description: "from is a reference to an ImageMark, ImageStreamImage, or DockerImage to copy source from."
                        properties:
                          kind:
                            type: string
                            example: ""
                            description: " Kind of the referent."
                          origin:
                            type: string
                            example: ""
                            description: "origin of the referent."
                          name:
                            type: string
                            example: ""
                            description: "name of the referent."
                          uid:
                            type: string
                            example: ""
                            description: "UID of the referent."
                          api_version:
                            type: string
                            example: ""
                            description: "API version of the referent."
                          resource_version:
                            type: string
                            example: ""
                            description: "Specific resourceVersion to which this reference is made, if any."
                          field_path:
                            type: string
                            example: ""
                            description: "If referring to a piece of an object instead of an entire object"
                      pull_secret:
                        type: string
                        description: "pull secret is a reference to a secret to be used to pull the image from a registry"
                        example: ""
                      paths:
                        type: array
                        description: "paths is a list of source and destination paths to copy from the image."
                        items:
                          type: object
                          properties:
                            source_path:
                              type: string
                              description: "sourcepath is the absolute path of the file or directory inside the image to copy to the build directory."
                              example: "https:///avaf/vad"
                            destination_dir:
                              type: string
                              description: "destinationdir is the relative directory within the build directory where files copied from the image are placed."
                              example: "/var/lib/"
                source_secret:
                  type: string
                  description: "source secret is the name of a Secret that would be used for setting up the authentication for cloning private repository."
                  example: "876543218765234567"
            strategy:
              type: object
              description: "strategy defines how to perform a build."
              properties:
                source_strategy:
                  type: object
                  description: "source strategy holds the parameters to the Source build strategy."
                  properties:
                    from:
                      type: object
                      description: "from is reference to an DockerImage, ImageStream, ImageMark, or ImageStreamImage from which  the docker image should be pulled"
                      properties:
                        kind:
                          type: string
                          example: "ImageMark"
                        name:
                          type: string
                          example: "ruby-20-centos7:latest"
            output:
              type: object
              description: "output describes the Docker image the Strategy should produce."
              properties:
                to:
                  type: object
                  description: "To defines an optional location to push the output of this build to. Kind must be one of 'ImageMark' or 'DockerImage'."
                  properties:
                    kind:
                      type: string
                      example: "ImageMark"
                    name:
                      type: string
                      example: "node-build-1:136c86c0"
            post_commit:
              type: object
              description: "postcommit is a build hook executed after the build output image is committed, before it is pushed to a registry."
              properties:
                script:
                  type: string
                  description: "script is a shell script to be run with `/bin/sh -ic`. "
                  example: "bundle exec rake test"
            node_selector:
              type: object
              description: "node selector is a selector which must be true for the build pod to fit on a node"
    BuildResponse:
      type: object
      properties:
        id:
          type: string
          example: "87909876543212344"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              example: "Build"
            api_version:
              type: string
              example: "v1"
        object_meta:
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "ruby-build"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - kind: "BuildConfig"
                  api_version: "v1"
                  name: "ruby-sample-build"
                  uid: "867543210987656789"
                  block_owner_deletion: true
        status:
          type: object
          description: "BuildStatus contains the status of a build"
          properties:
            phase:
              type: string
              example: "New"
              description: "phase is the point in the build lifecycle. Possible values are  New, Pending, Running, Complete, failed, Error, and Cancelled."
            cancelled:
              type: boolean
              example: false
              description: "cancelled describes if a cancel event was triggered for the build."
            reason:
              type: string
              example: ""
              description: "reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI."
            message:
              type: string
              example: ""
              description: "message is a human-readable message indicating details about why the build has this status."
            start_timestamp:
              type: string
              example: ""
              description: "starttimestamp is a timestamp representing the server time when this Build started running in a Pod."
            completion_timestamp:
              type: string
              example: ""
              description: "completionTimestamp is a timestamp representing the server time when this Build was finished, whether that build failed or succeeded.  It reflects the time at which the Pod running the Build terminated."
            duration:
              type: string
              example: ""
              description: "duration contains time.Duration object describing build time."
            output_docker_image_reference:
              type: string
              example: ""
              description: "outputDockerImageReference contains a reference to the Docker image that will be built by this build."
            output:
              type: object
              description: "output describes the Docker image the build has produced."
              properties:
                to:
                  type: string
                  example: ""
                  description: "to describes the status of the built image being pushed to a registry."
        spec:
          type: object
          description: "spec holds all the input necessary to produce a new build, and the conditions when  to trigger them."
          properties:
            triggerd_by_causes:
              type: array
              description: "triggeredBy describes which triggers started the most recent update to the buildconfig and contains information about those triggers."
              items:
                type: object
                properties:
                  message:
                    type: string
                    example: ""
                    description: "message is used to store a human readable message for why the build was triggered. E.g.: Manually triggered by user, Configuration change,etc."
                  webhook_causes:
                    type: array
                    description: "WebHook represents data for a specified webhook that fired a  specific build."
                    items:
                      type: object
                      properties:
                        hook_type:
                          type: string
                          example: "git"
                          description: "Web hook type"
                        revision:
                          type: object
                          description: "Revision is an optional field that stores the git source revision information of the generic webhook trigger when it is available."
                          properties:
                            git:
                              type: object
                              description: "Git contains information about git-based build source"
                              properties:
                                commit:
                                  type: string
                                  example: "78rftghjvbnm"
                                  description: "Commit is the commit hash identifying a specific commit"
                                message:
                                  type: string
                                  example: "readme update"
                                  description: "Message is the description of a specific commit"
                        secret:
                          type: string
                          description: "Secret is the obfuscated webhook secret that triggered a build."
                          example: "876543212345678909"
                  image_build_cause:
                    type: object
                    description: "ImageChangeBuild stores information about an imagechange event that triggered a new build."
                    properties:
                      image_id:
                        type: string
                        example: ""
                        description: "ImageID is the ID of the image that triggered a a new build."
            source:
              description: "source describes the SCM in use."
              type: object
              properties:
                git:
                  type: object
                  description: "git contains optional information about git build source"
                  properties:
                    uri:
                      type: string
                      description: "uri points to the source that will be built. The structure of the source will depend on the type of build to run"
                      example: "https://github.com/rioadvancement/news-composer-network"
                    reference:
                      type: string
                      description: " ref is the branch/tag/ref to build."
                      example: "master"
                binary:
                  type: object
                  description: "binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy."
                  properties:
                    as_file:
                      type: string
                      description: "asfile indicates that the provided binary input should be considered a single file within the build input."
                      example: ""
                docker_file:
                  type: string
                  description: "dockerfile is the raw contents of a Dockerfile which should be built"
                  example: ""
                images:
                  type: array
                  description: "images describes a set of images to be used to provide source for the build"
                  items:
                    type: object
                    properties:
                      from:
                        type: string
                        description: "from is a reference to an ImageMark, ImageStreamImage, or DockerImage to copy source from."
                        properties:
                          kind:
                            type: string
                            example: ""
                            description: " Kind of the referent."
                          origin:
                            type: string
                            example: ""
                            description: "origin of the referent."
                          name:
                            type: string
                            example: ""
                            description: "name of the referent."
                          uid:
                            type: string
                            example: ""
                            description: "UID of the referent."
                          api_version:
                            type: string
                            example: ""
                            description: "API version of the referent."
                          resource_version:
                            type: string
                            example: ""
                            description: "Specific resourceVersion to which this reference is made, if any."
                          field_path:
                            type: string
                            example: ""
                            description: "If referring to a piece of an object instead of an entire object"
                      pull_secret:
                        type: string
                        description: "pull secret is a reference to a secret to be used to pull the image from a registry"
                        example: ""
                      paths:
                        type: array
                        description: "paths is a list of source and destination paths to copy from the image."
                        items:
                          type: object
                          properties:
                            source_path:
                              type: string
                              description: "sourcepath is the absolute path of the file or directory inside the image to copy to the build directory."
                              example: "https:///avaf/vad"
                            destination_dir:
                              type: string
                              description: "destinationdir is the relative directory within the build directory where files copied from the image are placed."
                              example: "/var/lib/"
                source_secret:
                  type: string
                  description: "source secret is the name of a Secret that would be used for setting up the authentication for cloning private repository."
                  example: "876543218765234567"
            strategy:
              type: object
              description: "strategy defines how to perform a build."
              properties:
                source_strategy:
                  type: object
                  description: "source strategy holds the parameters to the Source build strategy."
                  properties:
                    from:
                      type: object
                      description: "from is reference to an DockerImage, ImageStream, ImageMark, or ImageStreamImage from which  the docker image should be pulled"
                      properties:
                        kind:
                          type: string
                          example: "ImageMark"
                        name:
                          type: string
                          example: "ruby-20-centos7:latest"
            output:
              type: object
              description: "output describes the Docker image the Strategy should produce."
              properties:
                to:
                  type: object
                  description: "To defines an optional location to push the output of this build to. Kind must be one of 'ImageMark' or 'DockerImage'."
                  properties:
                    kind:
                      type: string
                      example: "ImageMark"
                    name:
                      type: string
                      example: "node-build-1:136c86c0"
            post_commit:
              type: object
              description: "postcommit is a build hook executed after the build output image is committed, before it is pushed to a registry."
              properties:
                script:
                  type: string
                  description: "script is a shell script to be run with `/bin/sh -ic`. "
                  example: "bundle exec rake test"
            node_selector:
              type: object
              description: "node selector is a selector which must be true for the build pod to fit on a node"
        created_at:
          type: string
          example: "2017-12-12T11:29:50.547529+00:00"
    BuildList:
      type: object
      properties:
        kind:
          type: string
          example: "BuildList"
        api_version:
          type: string
          example: "v1"
        items:
          type: array
          items:
            $ref: '#/components/schemas/BuildResponse'
    ImageRef:
      type: object
      properties:
        object_meta:
          required:
            - account
            - name
          type: object
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "ruby"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - kind: "Build"
                  api_version: "v1"
                  name: "ruby-build"
                  uid: "87909876543212344"
                  block_owner_deletion: true
        docker_image_reference:
          type: string
          example: "ruby"
          description: "The string that can be used to pull this image."
        docker_image_meta_data_version:
          type: string
          description: "This attribute conveys the version of docker metadata the JSON should be stored in, which if empty defaults to 1.0"
          example: "1.0"
        docker_image_manifest:
          type: string
          example: "manifest"
          description: "The raw JSON of the manifest"
        docker_image_manifest_media_type:
          type: string
          example: "application/vnd.docker.distribution.manifest.v1+json"
          description: "DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2."
        docker_image_config:
          type: string
          example: "my-config"
          description: "DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2."
        docker_image_layers:
          type: array
          description: "DockerImageLayers represents the layers in the image. May not be set if the image does not define that data."
          items:
            $ref: '#/components/schemas/DockerImageLayer'
          example:
            - name: "d74508fb6632 "
              layer_size: 1
              media_type: ""
            - name: "c22013c84729"
              layer_size: 94
              media_type: ""
        docker_image_metadata:
          type: object
          description: "Metadata about this image"
          properties:
            docker_image_id:
              type: string
              example: "2f095dcd37dc"
            parent:
              type: string
              example: "lizrice"
            created:
              type: string
              example: "November 11, 2016 at 03.40 PM"
            size:
              type: integer
              example: 2
            type_meta:
              type: object
              properties:
                kind:
                  type: string
                  example: ""
                api_version:
                  type: string
                  example: ""
            config:
              type: object
              properties:
                image:
                  type: string
                  example: "lizrice/childimage"
                labels:
                  type: object
                  properties:
                    org.label.description:
                      type: string
                      example: "this is experiemental image that i use to test container images and labels"
                    org.label-schema.license:
                      type: string
                      example: "Apache2.0"
                    org.label-schema.name:
                      type: string
                      example: "childimage"
    ImageRefResponse:
      type: object
      properties:
        id:
          type: string
          example: "89076543212345698"
        type_meta:
          type: object
          properties:
            kind:
              type: string
              example: "ImageRef"
            api_version:
              type: string
              example: "v1"
        object_meta:
          type: object
          required:
            - account
            - name
          properties:
            name:
              type: string
              description: "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically"
              example: "ruby"
            account:
              type: string
              description: "account  defines the id the user account"
              example: "870109412813971456"
            created_at:
              type: string
              description: "created_at is a timestamp representing the server time when this object was created. "
              example: "2017-12-11T11:29:50.547529+00:00"
            deleted_at:
              type: string
              description: " deleted_at is RFC 3339 date and time at which this resource will be deleted. This field is set by the api server when a graceful deletion is requested by the user, and is not directly settable by a client."
              example: ""
            deletion_grace_period_seconds:
              type: integer
              description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened."
              example: 30
            cluster_name:
              type: string
              description: "The name of the cluster(datacenter/location) which the object belongs to."
              example: ""
            labels:
              type: object
              description: " Map of string keys and values that can be used to organize and categorize(scope and select) objects. May match selectors of replication controllers and services."
            annotations:
              type: object
              description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. "
            finalizers:
              type: array
              description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list."
              items:
                type: string
                example: ""
            owner_references:
              type: array
              description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. "
              items:
                $ref: '#/components/schemas/OwnerReference'
              example:
                - kind: "Build"
                  api_version: "v1"
                  name: "ruby-build"
                  uid: "87909876543212344"
                  block_owner_deletion: true
        docker_image_reference:
          type: string
          example: "ruby"
          description: "The string that can be used to pull this image."
        docker_image_meta_data_version:
          type: string
          description: "This attribute conveys the version of docker metadata the JSON should be stored in, which if empty defaults to 1.0"
          example: "1.0"
        docker_image_manifest:
          type: string
          example: "manifest"
          description: "The raw JSON of the manifest"
        docker_image_manifest_media_type:
          type: string
          example: "application/vnd.docker.distribution.manifest.v1+json"
          description: "DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2."
        docker_image_config:
          type: string
          example: "my-config"
          description: "DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2."
        docker_image_layers:
          type: array
          description: "DockerImageLayers represents the layers in the image. May not be set if the image does not define that data."
          items:
            $ref: '#/components/schemas/DockerImageLayer'
          example:
            - name: "d74508fb6632 "
              layer_size: 1
              media_type: ""
            - name: "c22013c84729"
              layer_size: 94
              media_type: ""
        docker_image_metadata:
          type: object
          description: "Metadata about this image"
          properties:
            docker_image_id:
              type: string
              example: "2f095dcd37dc"
            parent:
              type: string
              example: "lizrice"
            created:
              type: string
              example: "November 11, 2016 at 03.40 PM"
            size:
              type: integer
              example: 2
            type_meta:
              type: object
              properties:
                kind:
                  type: string
                  example: ""
                api_version:
                  type: string
                  example: ""
            config:
              type: object
              properties:
                image:
                  type: string
                  example: "lizrice/childimage"
                labels:
                  type: object
                  properties:
                    org.label.description:
                      type: string
                      example: "this is experiemental image that i use to test container images and labels"
                    org.label-schema.license:
                      type: string
                      example: "Apache2.0"
                    org.label-schema.name:
                      type: string
                      example: "childimage"
        created_at:
          type: string
          example: "2017-12-12T11:29:50.547529+00:00"
    DockerImageLayer:
      type: object
      properties:
        name:
          type: string
        layer_size:
          type: integer
        media_type:
          type: string
    400Error:
      required:
        - status
        - code
        - message
        - reason
      properties:
        status:
          type: string
          example: Failure
        code:
          type: string
          example: '400'
        message:
          type: string
          example: "Missing parameters or can't parse body"
        reason:
          type: string
          example: "Bad Request"
    500Error:
      required:
        - status
        - code
        - message
        - reason
      properties:
        status:
          type: string
          example: Failure
        code:
          type: string
          example: '500'
        message:
          type: string
          example: "Must have database, blockchain running. Is it started yet ?"
        reason:
          type: string
          example: "internal server error"
    404Error:
      required:
        - status
        - code
        - message
        - reason
      properties:
        status:
          type: string
          example: Failure
        code:
          type: string
          example: '404'
        message:
          type: string
          example: "No Record Found for the id"
        reason:
          type: string
          example: "Not Found"
    401Error:
      required:
        - status
        - code
        - message
        - reason
      properties:
        status:
          type: string
          example: Failure
        code:
          type: string
          example: '401'
        message:
          type: string
          example: "Refused since authentication is required and has failed or has not yet been provided.Refer  https://bit.ly/rioosauthetication for the supported authentication."
        reason:
          type: string
          example: "Unauthorized"
    406Error:
      required:
        - status
        - code
        - message
        - reason
      properties:
        status:
          type: string
          example: Failure
        code:
          type: string
          example: '406'
        message:
          type: string
          example: "Refused since the requested resource is must have headers for the supported authentication. Refer  https://bit.ly/rioosauthetication for the supported authentication."
        reason:
          type: string
          example: "Not Acceptable Headers"
    403Error:
      required:
        - status
        - code
        - message
        - reason
      properties:
        status:
          type: string
          example: Failure
        code:
          type: string
          example: '403'
        message:
          type: string
          example: "The request is valid, but the user must have necessary authorization (Role & Permissions) for a performing action on  the resource.Refer  https://bit.ly/rioosauthorization for the supported authorization."
        reason:
          type: string
          example: "Forbidden. Must Have Role & Permissions"
    402Error:
      required:
        - status
        - code
        - message
        - reason
      properties:
        status:
          type: string
          example: Failure
        code:
          type: string
          example: '402'
        message:
          type: string
          example: "The request is valid, but the user must have necessary entitlement to continue using Rio/OS. Refer  https://bit.ly/rioosentitlement for getting an entitlement."
        reason:
          type: string
          example: "An exact reason from the entitlement checker appears here."

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string